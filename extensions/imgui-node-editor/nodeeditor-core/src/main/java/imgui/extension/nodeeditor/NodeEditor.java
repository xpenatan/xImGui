/*
  -------------------------------------------------------
   This file was generated by JParser
 
   Do not make changes to this file
  -------------------------------------------------------
*/
package imgui.extension.nodeeditor;

import imgui.ImVec2;
import imgui.ImDrawList;
import imgui.ImVec4;
import imgui.idl.IDLBase;
import imgui.idl.helper.IDLString;
import imgui.idl.helper.IDLLongArray;

public class NodeEditor extends IDLBase {

    static private EditorContext EditorContext_TEMP_STATIC_GEN_0;

    static private EditorContext EditorContext_TEMP_STATIC_GEN_1;

    static private EditorContext EditorContext_TEMP_STATIC_GEN_2;

    static private Config Config_TEMP_STATIC_GEN_0;

    static private Config Config_TEMP_STATIC_GEN_1;

    static private Style Style_TEMP_STATIC_GEN_0;

    static private IDLString IDLString_TEMP_STATIC_GEN_0;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_0;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_1;

    static private ImDrawList ImDrawList_TEMP_STATIC_GEN_0;

    static private ImDrawList ImDrawList_TEMP_STATIC_GEN_1;

    static private ImDrawList ImDrawList_TEMP_STATIC_GEN_2;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_2;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_3;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_4;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_5;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_6;

    /*
      [-JNI;-NATIVE]
              #include "NodeEditorCustom.h"
    */
    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected NodeEditor(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static NodeEditor native_new() {
        return new NodeEditor((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor* nativeObject = (NodeEditor*)this_addr;
      delete nativeObject;
    */
    public static native void internal_native_deleteNative(long this_addr);

    public static void SetCurrentEditor(EditorContext ctx) {
        internal_native_SetCurrentEditor(ctx.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::SetCurrentEditor((EditorContext* )ctx_addr);
    */
    public static native void internal_native_SetCurrentEditor(long ctx_addr);

    public static EditorContext GetCurrentEditor() {
        long pointer = internal_native_GetCurrentEditor();
        if (pointer == 0)
            return EditorContext.NULL;
        if (EditorContext_TEMP_STATIC_GEN_0 == null)
            EditorContext_TEMP_STATIC_GEN_0 = EditorContext.native_new();
        EditorContext_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return EditorContext_TEMP_STATIC_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)NodeEditor::GetCurrentEditor();
    */
    public static native long internal_native_GetCurrentEditor();

    public static EditorContext CreateEditor(LoadSaveSettingsListener listener) {
        long pointer = internal_native_CreateEditor(listener.native_address);
        if (pointer == 0)
            return EditorContext.NULL;
        if (EditorContext_TEMP_STATIC_GEN_1 == null)
            EditorContext_TEMP_STATIC_GEN_1 = EditorContext.native_new();
        EditorContext_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return EditorContext_TEMP_STATIC_GEN_1;
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)NodeEditor::CreateEditor((LoadSaveSettingsListener* )listener_addr);
    */
    public static native long internal_native_CreateEditor(long listener_addr);

    public static EditorContext CreateEditor() {
        long pointer = internal_native_CreateEditor();
        if (pointer == 0)
            return EditorContext.NULL;
        if (EditorContext_TEMP_STATIC_GEN_2 == null)
            EditorContext_TEMP_STATIC_GEN_2 = EditorContext.native_new();
        EditorContext_TEMP_STATIC_GEN_2.internal_reset(pointer, false);
        return EditorContext_TEMP_STATIC_GEN_2;
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)NodeEditor::CreateEditor();
    */
    public static native long internal_native_CreateEditor();

    public static void DestroyEditor(EditorContext ctx) {
        internal_native_DestroyEditor(ctx.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::DestroyEditor((EditorContext* )ctx_addr);
    */
    public static native void internal_native_DestroyEditor(long ctx_addr);

    public static Config GetConfig(EditorContext ctx) {
        long pointer = internal_native_GetConfig(ctx.native_address);
        if (pointer == 0)
            return Config.NULL;
        if (Config_TEMP_STATIC_GEN_0 == null)
            Config_TEMP_STATIC_GEN_0 = Config.native_new();
        Config_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return Config_TEMP_STATIC_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)&NodeEditor::GetConfig((EditorContext* )ctx_addr);
    */
    public static native long internal_native_GetConfig(long ctx_addr);

    public static Config GetConfig() {
        long pointer = internal_native_GetConfig();
        if (pointer == 0)
            return Config.NULL;
        if (Config_TEMP_STATIC_GEN_1 == null)
            Config_TEMP_STATIC_GEN_1 = Config.native_new();
        Config_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return Config_TEMP_STATIC_GEN_1;
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)&NodeEditor::GetConfig();
    */
    public static native long internal_native_GetConfig();

    public static Style GetStyle() {
        long pointer = internal_native_GetStyle();
        if (pointer == 0)
            return Style.NULL;
        if (Style_TEMP_STATIC_GEN_0 == null)
            Style_TEMP_STATIC_GEN_0 = Style.native_new();
        Style_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return Style_TEMP_STATIC_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)&NodeEditor::GetStyle();
    */
    public static native long internal_native_GetStyle();

    public static IDLString GetStyleColorName(StyleColor colorIndex) {
        long pointer = internal_native_GetStyleColorName(colorIndex.getValue());
        if (pointer == 0)
            return IDLString.NULL;
        if (IDLString_TEMP_STATIC_GEN_0 == null)
            IDLString_TEMP_STATIC_GEN_0 = IDLString.native_new();
        IDLString_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return IDLString_TEMP_STATIC_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      static IDLString copy_addr;
      copy_addr = NodeEditor::GetStyleColorName((::StyleColor)colorIndex);
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetStyleColorName(long colorIndex);

    public static void PushStyleColor(StyleColor colorIndex, ImVec4 color) {
        internal_native_PushStyleColor(colorIndex.getValue(), color.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PushStyleColor((::StyleColor)colorIndex, *((ImVec4* )color_addr));
    */
    public static native void internal_native_PushStyleColor(long colorIndex, long color_addr);

    public static void PopStyleColor(int count) {
        internal_native_PopStyleColor(count);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PopStyleColor((int)count);
    */
    public static native void internal_native_PopStyleColor(int count);

    public static void PopStyleColor() {
        internal_native_PopStyleColor();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PopStyleColor();
    */
    public static native void internal_native_PopStyleColor();

    public static void PushStyleVar(StyleVar varIndex, float value) {
        internal_native_PushStyleVar__0(varIndex.getValue(), value);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PushStyleVar((::StyleVar)varIndex, (float)value);
    */
    public static native void internal_native_PushStyleVar__0(long varIndex, float value);

    public static void PushStyleVar(StyleVar varIndex, ImVec2 value) {
        internal_native_PushStyleVar__1(varIndex.getValue(), value.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PushStyleVar((::StyleVar)varIndex, *((ImVec2* )value_addr));
    */
    public static native void internal_native_PushStyleVar__1(long varIndex, long value_addr);

    public static void PushStyleVar(StyleVar varIndex, ImVec4 value) {
        internal_native_PushStyleVar__2(varIndex.getValue(), value.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PushStyleVar((::StyleVar)varIndex, *((ImVec4* )value_addr));
    */
    public static native void internal_native_PushStyleVar__2(long varIndex, long value_addr);

    public static void PopStyleVar(int count) {
        internal_native_PopStyleVar(count);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PopStyleVar((int)count);
    */
    public static native void internal_native_PopStyleVar(int count);

    public static void PopStyleVar() {
        internal_native_PopStyleVar();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PopStyleVar();
    */
    public static native void internal_native_PopStyleVar();

    public static void Begin(String id, ImVec2 size) {
        internal_native_Begin(id, size.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::Begin(id, *((ImVec2* )size_addr));
    */
    public static native void internal_native_Begin(String id, long size_addr);

    public static void Begin(String id) {
        internal_native_Begin(id);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::Begin(id);
    */
    public static native void internal_native_Begin(String id);

    public static void End() {
        internal_native_End();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::End();
    */
    public static native void internal_native_End();

    public static void BeginNode(int id) {
        internal_native_BeginNode(id);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::BeginNode((int)id);
    */
    public static native void internal_native_BeginNode(int id);

    public static void BeginPin(int id, PinKind kind) {
        internal_native_BeginPin(id, kind.getValue());
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::BeginPin((int)id, (PinKind)kind);
    */
    public static native void internal_native_BeginPin(int id, long kind);

    public static void PinRect(ImVec2 a, ImVec2 b) {
        internal_native_PinRect(a.native_address, b.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PinRect(*((ImVec2* )a_addr), *((ImVec2* )b_addr));
    */
    public static native void internal_native_PinRect(long a_addr, long b_addr);

    public static void PinPivotRect(ImVec2 a, ImVec2 b) {
        internal_native_PinPivotRect(a.native_address, b.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PinPivotRect(*((ImVec2* )a_addr), *((ImVec2* )b_addr));
    */
    public static native void internal_native_PinPivotRect(long a_addr, long b_addr);

    public static void PinPivotSize(ImVec2 size) {
        internal_native_PinPivotSize(size.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PinPivotSize(*((ImVec2* )size_addr));
    */
    public static native void internal_native_PinPivotSize(long size_addr);

    public static void PinPivotScale(ImVec2 scale) {
        internal_native_PinPivotScale(scale.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PinPivotScale(*((ImVec2* )scale_addr));
    */
    public static native void internal_native_PinPivotScale(long scale_addr);

    public static void PinPivotAlignment(ImVec2 alignment) {
        internal_native_PinPivotAlignment(alignment.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::PinPivotAlignment(*((ImVec2* )alignment_addr));
    */
    public static native void internal_native_PinPivotAlignment(long alignment_addr);

    public static void EndPin() {
        internal_native_EndPin();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::EndPin();
    */
    public static native void internal_native_EndPin();

    public static void Group(ImVec2 size) {
        internal_native_Group(size.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::Group(*((ImVec2* )size_addr));
    */
    public static native void internal_native_Group(long size_addr);

    public static void EndNode() {
        internal_native_EndNode();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::EndNode();
    */
    public static native void internal_native_EndNode();

    public static boolean BeginGroupHint(int nodeId) {
        return internal_native_BeginGroupHint(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::BeginGroupHint((int)nodeId);
    */
    public static native boolean internal_native_BeginGroupHint(int nodeId);

    public static ImVec2 GetGroupMin() {
        long pointer = internal_native_GetGroupMin();
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_STATIC_GEN_0 == null)
            ImVec2_TEMP_STATIC_GEN_0 = ImVec2.native_new();
        ImVec2_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      static ImVec2 copy_addr;
      copy_addr = NodeEditor::GetGroupMin();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetGroupMin();

    public static ImVec2 GetGroupMax() {
        long pointer = internal_native_GetGroupMax();
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_STATIC_GEN_1 == null)
            ImVec2_TEMP_STATIC_GEN_1 = ImVec2.native_new();
        ImVec2_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_1;
    }

    /*
      [-JNI;-NATIVE]
      static ImVec2 copy_addr;
      copy_addr = NodeEditor::GetGroupMax();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetGroupMax();

    public static ImDrawList GetHintForegroundDrawList() {
        long pointer = internal_native_GetHintForegroundDrawList();
        if (pointer == 0)
            return ImDrawList.NULL;
        if (ImDrawList_TEMP_STATIC_GEN_0 == null)
            ImDrawList_TEMP_STATIC_GEN_0 = ImDrawList.native_new();
        ImDrawList_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return ImDrawList_TEMP_STATIC_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)NodeEditor::GetHintForegroundDrawList();
    */
    public static native long internal_native_GetHintForegroundDrawList();

    public static ImDrawList GetHintBackgroundDrawList() {
        long pointer = internal_native_GetHintBackgroundDrawList();
        if (pointer == 0)
            return ImDrawList.NULL;
        if (ImDrawList_TEMP_STATIC_GEN_1 == null)
            ImDrawList_TEMP_STATIC_GEN_1 = ImDrawList.native_new();
        ImDrawList_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return ImDrawList_TEMP_STATIC_GEN_1;
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)NodeEditor::GetHintBackgroundDrawList();
    */
    public static native long internal_native_GetHintBackgroundDrawList();

    public static void EndGroupHint() {
        internal_native_EndGroupHint();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::EndGroupHint();
    */
    public static native void internal_native_EndGroupHint();

    public static ImDrawList GetNodeBackgroundDrawList(int nodeId) {
        long pointer = internal_native_GetNodeBackgroundDrawList(nodeId);
        if (pointer == 0)
            return ImDrawList.NULL;
        if (ImDrawList_TEMP_STATIC_GEN_2 == null)
            ImDrawList_TEMP_STATIC_GEN_2 = ImDrawList.native_new();
        ImDrawList_TEMP_STATIC_GEN_2.internal_reset(pointer, false);
        return ImDrawList_TEMP_STATIC_GEN_2;
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)NodeEditor::GetNodeBackgroundDrawList((int)nodeId);
    */
    public static native long internal_native_GetNodeBackgroundDrawList(int nodeId);

    public static boolean Link(int id, int startPinId, int endPinId, ImVec4 color, float thickness) {
        return internal_native_Link(id, startPinId, endPinId, color.native_address, thickness);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::Link((int)id, (int)startPinId, (int)endPinId, *((ImVec4* )color_addr), (float)thickness);
    */
    public static native boolean internal_native_Link(int id, int startPinId, int endPinId, long color_addr, float thickness);

    public static boolean Link(int id, int startPinId, int endPinId, ImVec4 color) {
        return internal_native_Link(id, startPinId, endPinId, color.native_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::Link((int)id, (int)startPinId, (int)endPinId, *((ImVec4* )color_addr));
    */
    public static native boolean internal_native_Link(int id, int startPinId, int endPinId, long color_addr);

    public static boolean Link(int id, int startPinId, int endPinId) {
        return internal_native_Link(id, startPinId, endPinId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::Link((int)id, (int)startPinId, (int)endPinId);
    */
    public static native boolean internal_native_Link(int id, int startPinId, int endPinId);

    public static void Flow(int linkId, FlowDirection direction) {
        internal_native_Flow(linkId, direction.getValue());
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::Flow((int)linkId, (FlowDirection)direction);
    */
    public static native void internal_native_Flow(int linkId, long direction);

    public static void Flow(int linkId) {
        internal_native_Flow(linkId);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::Flow((int)linkId);
    */
    public static native void internal_native_Flow(int linkId);

    public static boolean BeginCreate(ImVec4 color, float thickness) {
        return internal_native_BeginCreate(color.native_address, thickness);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::BeginCreate(*((ImVec4* )color_addr), (float)thickness);
    */
    public static native boolean internal_native_BeginCreate(long color_addr, float thickness);

    public static boolean BeginCreate(ImVec4 color) {
        return internal_native_BeginCreate(color.native_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::BeginCreate(*((ImVec4* )color_addr));
    */
    public static native boolean internal_native_BeginCreate(long color_addr);

    public static boolean BeginCreate() {
        return internal_native_BeginCreate();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::BeginCreate();
    */
    public static native boolean internal_native_BeginCreate();

    public static boolean QueryNewLink(IDLLongArray startId, IDLLongArray endId) {
        return internal_native_QueryNewLink(startId.native_void_address, endId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryNewLink((long long*)startId_addr, (long long*)endId_addr);
    */
    public static native boolean internal_native_QueryNewLink(long startId_addr, long endId_addr);

    public static boolean QueryNewLink(IDLLongArray startId, IDLLongArray endId, ImVec4 color, float thickness) {
        return internal_native_QueryNewLink(startId.native_void_address, endId.native_void_address, color.native_address, thickness);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryNewLink((long long*)startId_addr, (long long*)endId_addr, *((ImVec4* )color_addr), (float)thickness);
    */
    public static native boolean internal_native_QueryNewLink(long startId_addr, long endId_addr, long color_addr, float thickness);

    public static boolean QueryNewLink(IDLLongArray startId, IDLLongArray endId, ImVec4 color) {
        return internal_native_QueryNewLink(startId.native_void_address, endId.native_void_address, color.native_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryNewLink((long long*)startId_addr, (long long*)endId_addr, *((ImVec4* )color_addr));
    */
    public static native boolean internal_native_QueryNewLink(long startId_addr, long endId_addr, long color_addr);

    public static boolean QueryNewNode(IDLLongArray pinId) {
        return internal_native_QueryNewNode(pinId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryNewNode((long long*)pinId_addr);
    */
    public static native boolean internal_native_QueryNewNode(long pinId_addr);

    public static boolean QueryNewNode(IDLLongArray pinId, ImVec4 color, float thickness) {
        return internal_native_QueryNewNode(pinId.native_void_address, color.native_address, thickness);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryNewNode((long long*)pinId_addr, *((ImVec4* )color_addr), (float)thickness);
    */
    public static native boolean internal_native_QueryNewNode(long pinId_addr, long color_addr, float thickness);

    public static boolean QueryNewNode(IDLLongArray pinId, ImVec4 color) {
        return internal_native_QueryNewNode(pinId.native_void_address, color.native_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryNewNode((long long*)pinId_addr, *((ImVec4* )color_addr));
    */
    public static native boolean internal_native_QueryNewNode(long pinId_addr, long color_addr);

    public static boolean AcceptNewItem() {
        return internal_native_AcceptNewItem();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptNewItem();
    */
    public static native boolean internal_native_AcceptNewItem();

    public static boolean AcceptNewItem(ImVec4 color, float thickness) {
        return internal_native_AcceptNewItem(color.native_address, thickness);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptNewItem(*((ImVec4* )color_addr), (float)thickness);
    */
    public static native boolean internal_native_AcceptNewItem(long color_addr, float thickness);

    public static boolean AcceptNewItem(ImVec4 color) {
        return internal_native_AcceptNewItem(color.native_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptNewItem(*((ImVec4* )color_addr));
    */
    public static native boolean internal_native_AcceptNewItem(long color_addr);

    public static void RejectNewItem() {
        internal_native_RejectNewItem();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::RejectNewItem();
    */
    public static native void internal_native_RejectNewItem();

    public static void RejectNewItem(ImVec4 color, float thickness) {
        internal_native_RejectNewItem(color.native_address, thickness);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::RejectNewItem(*((ImVec4* )color_addr), (float)thickness);
    */
    public static native void internal_native_RejectNewItem(long color_addr, float thickness);

    public static void RejectNewItem(ImVec4 color) {
        internal_native_RejectNewItem(color.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::RejectNewItem(*((ImVec4* )color_addr));
    */
    public static native void internal_native_RejectNewItem(long color_addr);

    public static void EndCreate() {
        internal_native_EndCreate();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::EndCreate();
    */
    public static native void internal_native_EndCreate();

    public static boolean BeginDelete() {
        return internal_native_BeginDelete();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::BeginDelete();
    */
    public static native boolean internal_native_BeginDelete();

    public static boolean QueryDeletedLink(IDLLongArray linkId, IDLLongArray startId, IDLLongArray endId) {
        return internal_native_QueryDeletedLink(linkId.native_void_address, startId.native_void_address, endId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryDeletedLink((long long*)linkId_addr, (long long*)startId_addr, (long long*)endId_addr);
    */
    public static native boolean internal_native_QueryDeletedLink(long linkId_addr, long startId_addr, long endId_addr);

    public static boolean QueryDeletedLink(IDLLongArray linkId, IDLLongArray startId) {
        return internal_native_QueryDeletedLink(linkId.native_void_address, startId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryDeletedLink((long long*)linkId_addr, (long long*)startId_addr);
    */
    public static native boolean internal_native_QueryDeletedLink(long linkId_addr, long startId_addr);

    public static boolean QueryDeletedLink(IDLLongArray linkId) {
        return internal_native_QueryDeletedLink(linkId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryDeletedLink((long long*)linkId_addr);
    */
    public static native boolean internal_native_QueryDeletedLink(long linkId_addr);

    public static boolean QueryDeletedNode(IDLLongArray nodeId) {
        return internal_native_QueryDeletedNode(nodeId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::QueryDeletedNode((long long*)nodeId_addr);
    */
    public static native boolean internal_native_QueryDeletedNode(long nodeId_addr);

    public static boolean AcceptDeletedItem(boolean deleteDependencies) {
        return internal_native_AcceptDeletedItem(deleteDependencies);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptDeletedItem(deleteDependencies);
    */
    public static native boolean internal_native_AcceptDeletedItem(boolean deleteDependencies);

    public static boolean AcceptDeletedItem() {
        return internal_native_AcceptDeletedItem();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptDeletedItem();
    */
    public static native boolean internal_native_AcceptDeletedItem();

    public static void RejectDeletedItem() {
        internal_native_RejectDeletedItem();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::RejectDeletedItem();
    */
    public static native void internal_native_RejectDeletedItem();

    public static void EndDelete() {
        internal_native_EndDelete();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::EndDelete();
    */
    public static native void internal_native_EndDelete();

    public static void SetNodePosition(int nodeId, ImVec2 editorPosition) {
        internal_native_SetNodePosition(nodeId, editorPosition.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::SetNodePosition((int)nodeId, *((ImVec2* )editorPosition_addr));
    */
    public static native void internal_native_SetNodePosition(int nodeId, long editorPosition_addr);

    public static void SetGroupSize(int nodeId, ImVec2 size) {
        internal_native_SetGroupSize(nodeId, size.native_address);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::SetGroupSize((int)nodeId, *((ImVec2* )size_addr));
    */
    public static native void internal_native_SetGroupSize(int nodeId, long size_addr);

    public static ImVec2 GetNodePosition(int nodeId) {
        long pointer = internal_native_GetNodePosition(nodeId);
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_STATIC_GEN_2 == null)
            ImVec2_TEMP_STATIC_GEN_2 = ImVec2.native_new();
        ImVec2_TEMP_STATIC_GEN_2.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_2;
    }

    /*
      [-JNI;-NATIVE]
      static ImVec2 copy_addr;
      copy_addr = NodeEditor::GetNodePosition((int)nodeId);
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetNodePosition(int nodeId);

    public static ImVec2 GetNodeSize(int nodeId) {
        long pointer = internal_native_GetNodeSize(nodeId);
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_STATIC_GEN_3 == null)
            ImVec2_TEMP_STATIC_GEN_3 = ImVec2.native_new();
        ImVec2_TEMP_STATIC_GEN_3.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_3;
    }

    /*
      [-JNI;-NATIVE]
      static ImVec2 copy_addr;
      copy_addr = NodeEditor::GetNodeSize((int)nodeId);
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetNodeSize(int nodeId);

    public static void CenterNodeOnScreen(int nodeId) {
        internal_native_CenterNodeOnScreen(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::CenterNodeOnScreen((int)nodeId);
    */
    public static native void internal_native_CenterNodeOnScreen(int nodeId);

    public static void SetNodeZPosition(int nodeId, float z) {
        internal_native_SetNodeZPosition(nodeId, z);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::SetNodeZPosition((int)nodeId, (float)z);
    */
    public static native void internal_native_SetNodeZPosition(int nodeId, float z);

    public static float GetNodeZPosition(int nodeId) {
        return internal_native_GetNodeZPosition(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetNodeZPosition((int)nodeId);
    */
    public static native float internal_native_GetNodeZPosition(int nodeId);

    public static void RestoreNodeState(int nodeId) {
        internal_native_RestoreNodeState(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::RestoreNodeState((int)nodeId);
    */
    public static native void internal_native_RestoreNodeState(int nodeId);

    public static void Suspend() {
        internal_native_Suspend();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::Suspend();
    */
    public static native void internal_native_Suspend();

    public static void Resume() {
        internal_native_Resume();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::Resume();
    */
    public static native void internal_native_Resume();

    public static boolean IsSuspended() {
        return internal_native_IsSuspended();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::IsSuspended();
    */
    public static native boolean internal_native_IsSuspended();

    public static boolean IsActive() {
        return internal_native_IsActive();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::IsActive();
    */
    public static native boolean internal_native_IsActive();

    public static boolean HasSelectionChanged() {
        return internal_native_HasSelectionChanged();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::HasSelectionChanged();
    */
    public static native boolean internal_native_HasSelectionChanged();

    public static int GetSelectedObjectCount() {
        return internal_native_GetSelectedObjectCount();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetSelectedObjectCount();
    */
    public static native int internal_native_GetSelectedObjectCount();

    public static int GetSelectedNodes(IDLLongArray nodes, int size) {
        return internal_native_GetSelectedNodes(nodes.native_void_address, size);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetSelectedNodes((long long*)nodes_addr, (int)size);
    */
    public static native int internal_native_GetSelectedNodes(long nodes_addr, int size);

    public static int GetSelectedLinks(IDLLongArray links, int size) {
        return internal_native_GetSelectedLinks(links.native_void_address, size);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetSelectedLinks((long long*)links_addr, (int)size);
    */
    public static native int internal_native_GetSelectedLinks(long links_addr, int size);

    public static boolean IsNodeSelected(int nodeId) {
        return internal_native_IsNodeSelected(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::IsNodeSelected((int)nodeId);
    */
    public static native boolean internal_native_IsNodeSelected(int nodeId);

    public static boolean IsLinkSelected(int linkId) {
        return internal_native_IsLinkSelected(linkId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::IsLinkSelected((int)linkId);
    */
    public static native boolean internal_native_IsLinkSelected(int linkId);

    public static void ClearSelection() {
        internal_native_ClearSelection();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::ClearSelection();
    */
    public static native void internal_native_ClearSelection();

    public static void SelectNode(int nodeId, boolean append) {
        internal_native_SelectNode(nodeId, append);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::SelectNode((int)nodeId, append);
    */
    public static native void internal_native_SelectNode(int nodeId, boolean append);

    public static void SelectNode(int nodeId) {
        internal_native_SelectNode(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::SelectNode((int)nodeId);
    */
    public static native void internal_native_SelectNode(int nodeId);

    public static void SelectLink(int linkId, boolean append) {
        internal_native_SelectLink(linkId, append);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::SelectLink((int)linkId, append);
    */
    public static native void internal_native_SelectLink(int linkId, boolean append);

    public static void SelectLink(int linkId) {
        internal_native_SelectLink(linkId);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::SelectLink((int)linkId);
    */
    public static native void internal_native_SelectLink(int linkId);

    public static void DeselectNode(int nodeId) {
        internal_native_DeselectNode(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::DeselectNode((int)nodeId);
    */
    public static native void internal_native_DeselectNode(int nodeId);

    public static void DeselectLink(int linkId) {
        internal_native_DeselectLink(linkId);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::DeselectLink((int)linkId);
    */
    public static native void internal_native_DeselectLink(int linkId);

    public static boolean DeleteNode(int nodeId) {
        return internal_native_DeleteNode(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::DeleteNode((int)nodeId);
    */
    public static native boolean internal_native_DeleteNode(int nodeId);

    public static boolean DeleteLink(int linkId) {
        return internal_native_DeleteLink(linkId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::DeleteLink((int)linkId);
    */
    public static native boolean internal_native_DeleteLink(int linkId);

    public static boolean HasAnyLinksNode(int nodeId) {
        return internal_native_HasAnyLinksNode(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::HasAnyLinksNode((int)nodeId);
    */
    public static native boolean internal_native_HasAnyLinksNode(int nodeId);

    public static boolean HasAnyLinksPin(int pinId) {
        return internal_native_HasAnyLinksPin(pinId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::HasAnyLinksPin((int)pinId);
    */
    public static native boolean internal_native_HasAnyLinksPin(int pinId);

    public static int BreakLinksNode(int nodeId) {
        return internal_native_BreakLinksNode(nodeId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::BreakLinksNode((int)nodeId);
    */
    public static native int internal_native_BreakLinksNode(int nodeId);

    public static int BreakLinksPin(int pinId) {
        return internal_native_BreakLinksPin(pinId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::BreakLinksPin((int)pinId);
    */
    public static native int internal_native_BreakLinksPin(int pinId);

    public static void NavigateToContent(float duration) {
        internal_native_NavigateToContent(duration);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::NavigateToContent((float)duration);
    */
    public static native void internal_native_NavigateToContent(float duration);

    public static void NavigateToContent() {
        internal_native_NavigateToContent();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::NavigateToContent();
    */
    public static native void internal_native_NavigateToContent();

    public static void NavigateToSelection(boolean zoomIn, float duration) {
        internal_native_NavigateToSelection(zoomIn, duration);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::NavigateToSelection(zoomIn, (float)duration);
    */
    public static native void internal_native_NavigateToSelection(boolean zoomIn, float duration);

    public static void NavigateToSelection(boolean zoomIn) {
        internal_native_NavigateToSelection(zoomIn);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::NavigateToSelection(zoomIn);
    */
    public static native void internal_native_NavigateToSelection(boolean zoomIn);

    public static void NavigateToSelection() {
        internal_native_NavigateToSelection();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::NavigateToSelection();
    */
    public static native void internal_native_NavigateToSelection();

    public static boolean ShowNodeContextMenu(IDLLongArray nodeId) {
        return internal_native_ShowNodeContextMenu(nodeId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::ShowNodeContextMenu((long long*)nodeId_addr);
    */
    public static native boolean internal_native_ShowNodeContextMenu(long nodeId_addr);

    public static boolean ShowPinContextMenu(IDLLongArray pinId) {
        return internal_native_ShowPinContextMenu(pinId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::ShowPinContextMenu((long long*)pinId_addr);
    */
    public static native boolean internal_native_ShowPinContextMenu(long pinId_addr);

    public static boolean ShowLinkContextMenu(IDLLongArray linkId) {
        return internal_native_ShowLinkContextMenu(linkId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::ShowLinkContextMenu((long long*)linkId_addr);
    */
    public static native boolean internal_native_ShowLinkContextMenu(long linkId_addr);

    public static boolean ShowBackgroundContextMenu() {
        return internal_native_ShowBackgroundContextMenu();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::ShowBackgroundContextMenu();
    */
    public static native boolean internal_native_ShowBackgroundContextMenu();

    public static void EnableShortcuts(boolean enable) {
        internal_native_EnableShortcuts(enable);
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::EnableShortcuts(enable);
    */
    public static native void internal_native_EnableShortcuts(boolean enable);

    public static boolean AreShortcutsEnabled() {
        return internal_native_AreShortcutsEnabled();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AreShortcutsEnabled();
    */
    public static native boolean internal_native_AreShortcutsEnabled();

    public static boolean BeginShortcut() {
        return internal_native_BeginShortcut();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::BeginShortcut();
    */
    public static native boolean internal_native_BeginShortcut();

    public static boolean AcceptCut() {
        return internal_native_AcceptCut();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptCut();
    */
    public static native boolean internal_native_AcceptCut();

    public static boolean AcceptCopy() {
        return internal_native_AcceptCopy();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptCopy();
    */
    public static native boolean internal_native_AcceptCopy();

    public static boolean AcceptPaste() {
        return internal_native_AcceptPaste();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptPaste();
    */
    public static native boolean internal_native_AcceptPaste();

    public static boolean AcceptDuplicate() {
        return internal_native_AcceptDuplicate();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptDuplicate();
    */
    public static native boolean internal_native_AcceptDuplicate();

    public static boolean AcceptCreateNode() {
        return internal_native_AcceptCreateNode();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::AcceptCreateNode();
    */
    public static native boolean internal_native_AcceptCreateNode();

    public static int GetActionContextSize() {
        return internal_native_GetActionContextSize();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetActionContextSize();
    */
    public static native int internal_native_GetActionContextSize();

    public static int GetActionContextNodes(IDLLongArray nodes, int size) {
        return internal_native_GetActionContextNodes(nodes.native_void_address, size);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetActionContextNodes((long long*)nodes_addr, (int)size);
    */
    public static native int internal_native_GetActionContextNodes(long nodes_addr, int size);

    public static int GetActionContextLinks(IDLLongArray links, int size) {
        return internal_native_GetActionContextLinks(links.native_void_address, size);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetActionContextLinks((long long*)links_addr, (int)size);
    */
    public static native int internal_native_GetActionContextLinks(long links_addr, int size);

    public static void EndShortcut() {
        internal_native_EndShortcut();
    }

    /*
      [-JNI;-NATIVE]
      NodeEditor::EndShortcut();
    */
    public static native void internal_native_EndShortcut();

    public static float GetCurrentZoom() {
        return internal_native_GetCurrentZoom();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetCurrentZoom();
    */
    public static native float internal_native_GetCurrentZoom();

    public static int GetHoveredNode() {
        return internal_native_GetHoveredNode();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetHoveredNode();
    */
    public static native int internal_native_GetHoveredNode();

    public static int GetHoveredPin() {
        return internal_native_GetHoveredPin();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetHoveredPin();
    */
    public static native int internal_native_GetHoveredPin();

    public static int GetHoveredLink() {
        return internal_native_GetHoveredLink();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetHoveredLink();
    */
    public static native int internal_native_GetHoveredLink();

    public static int GetDoubleClickedNode() {
        return internal_native_GetDoubleClickedNode();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetDoubleClickedNode();
    */
    public static native int internal_native_GetDoubleClickedNode();

    public static int GetDoubleClickedPin() {
        return internal_native_GetDoubleClickedPin();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetDoubleClickedPin();
    */
    public static native int internal_native_GetDoubleClickedPin();

    public static int GetDoubleClickedLink() {
        return internal_native_GetDoubleClickedLink();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetDoubleClickedLink();
    */
    public static native int internal_native_GetDoubleClickedLink();

    public static boolean IsBackgroundClicked() {
        return internal_native_IsBackgroundClicked();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::IsBackgroundClicked();
    */
    public static native boolean internal_native_IsBackgroundClicked();

    public static boolean IsBackgroundDoubleClicked() {
        return internal_native_IsBackgroundDoubleClicked();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::IsBackgroundDoubleClicked();
    */
    public static native boolean internal_native_IsBackgroundDoubleClicked();

    public static int GetBackgroundClickButtonIndex() {
        return internal_native_GetBackgroundClickButtonIndex();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetBackgroundClickButtonIndex();
    */
    public static native int internal_native_GetBackgroundClickButtonIndex();

    public static int GetBackgroundDoubleClickButtonIndex() {
        return internal_native_GetBackgroundDoubleClickButtonIndex();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetBackgroundDoubleClickButtonIndex();
    */
    public static native int internal_native_GetBackgroundDoubleClickButtonIndex();

    public static boolean GetLinkPins(int linkId, IDLLongArray startPinId, IDLLongArray endPinId) {
        return internal_native_GetLinkPins(linkId, startPinId.native_void_address, endPinId.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetLinkPins((int)linkId, (long long*)startPinId_addr, (long long*)endPinId_addr);
    */
    public static native boolean internal_native_GetLinkPins(int linkId, long startPinId_addr, long endPinId_addr);

    public static boolean PinHadAnyLinks(int pinId) {
        return internal_native_PinHadAnyLinks(pinId);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::PinHadAnyLinks((int)pinId);
    */
    public static native boolean internal_native_PinHadAnyLinks(int pinId);

    public static ImVec2 GetScreenSize() {
        long pointer = internal_native_GetScreenSize();
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_STATIC_GEN_4 == null)
            ImVec2_TEMP_STATIC_GEN_4 = ImVec2.native_new();
        ImVec2_TEMP_STATIC_GEN_4.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_4;
    }

    /*
      [-JNI;-NATIVE]
      static ImVec2 copy_addr;
      copy_addr = NodeEditor::GetScreenSize();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetScreenSize();

    public static ImVec2 ScreenToCanvas(ImVec2 pos) {
        long pointer = internal_native_ScreenToCanvas(pos.native_address);
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_STATIC_GEN_5 == null)
            ImVec2_TEMP_STATIC_GEN_5 = ImVec2.native_new();
        ImVec2_TEMP_STATIC_GEN_5.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_5;
    }

    /*
      [-JNI;-NATIVE]
      static ImVec2 copy_addr;
      copy_addr = NodeEditor::ScreenToCanvas(*((ImVec2* )pos_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_ScreenToCanvas(long pos_addr);

    public static ImVec2 CanvasToScreen(ImVec2 pos) {
        long pointer = internal_native_CanvasToScreen(pos.native_address);
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_STATIC_GEN_6 == null)
            ImVec2_TEMP_STATIC_GEN_6 = ImVec2.native_new();
        ImVec2_TEMP_STATIC_GEN_6.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_6;
    }

    /*
      [-JNI;-NATIVE]
      static ImVec2 copy_addr;
      copy_addr = NodeEditor::CanvasToScreen(*((ImVec2* )pos_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_CanvasToScreen(long pos_addr);

    public static int GetNodeCount() {
        return internal_native_GetNodeCount();
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetNodeCount();
    */
    public static native int internal_native_GetNodeCount();

    public static int GetOrderedNodeIds(IDLLongArray nodes, int size) {
        return internal_native_GetOrderedNodeIds(nodes.native_void_address, size);
    }

    /*
      [-JNI;-NATIVE]
      return NodeEditor::GetOrderedNodeIds((long long*)nodes_addr, (int)size);
    */
    public static native int internal_native_GetOrderedNodeIds(long nodes_addr, int size);
}
