/*
  -------------------------------------------------------
   This file was generated by JParser
 
   Do not make changes to this file
  -------------------------------------------------------
*/
package gen.imgui;

import gen.imgui.idl.IDLBase;
import gen.imgui.idl.helper.IDLByteArray;
import gen.imgui.idl.helper.IDLIntArray;

public class ImFontAtlas extends IDLBase {

    private ImFont ImFont_TEMP_GEN_0;

    private ImFont ImFont_TEMP_GEN_1;

    public ImFont AddFontFromMemoryTTF(byte[] fontData, int font_size) {
        IDLByteArray byteArray = new IDLByteArray(fontData.length);
        byteArray.copy(fontData);
        return AddFontFromMemoryTTF(byteArray, byteArray.getSize(), font_size);
    }

    public void GetTexDataAsRGBA32(IDLByteArray pixelBuffer, IDLIntArray outWidth, IDLIntArray outHeight) {
        GetTexDataAsRGBA32NATIVE((int) native_address, (int) pixelBuffer.native_address, (int) outWidth.native_address, (int) outHeight.native_address);
    }

    /*
      [-TEAVM;-NATIVE]
              var fontAtlas = [MODULE].wrapPointer(addr, [MODULE].ImFontAtlas);
              var pixelBufferArray = [MODULE].wrapPointer(pixelBufferAddr, [MODULE].IDLByteArray);
              var widthIntArray = [MODULE].wrapPointer(widthAddr, [MODULE].IDLIntArray);
              var heightIntArray = [MODULE].wrapPointer(heightAddr, [MODULE].IDLIntArray);
              var widthArr = widthIntArray.getPointer();
              var heightArr = heightIntArray.getPointer();
              [MODULE].ImHelper.prototype.memcpyFont(fontAtlas, pixelBufferArray, widthArr, heightArr);
    */
    @org.teavm.jso.JSBody(params = {"addr", "pixelBufferAddr", "widthAddr", "heightAddr"}, script = "var fontAtlas = imgui.wrapPointer(addr, imgui.ImFontAtlas); var pixelBufferArray = imgui.wrapPointer(pixelBufferAddr, imgui.IDLByteArray); var widthIntArray = imgui.wrapPointer(widthAddr, imgui.IDLIntArray); var heightIntArray = imgui.wrapPointer(heightAddr, imgui.IDLIntArray); var widthArr = widthIntArray.getPointer(); var heightArr = heightIntArray.getPointer(); imgui.ImHelper.prototype.memcpyFont(fontAtlas, pixelBufferArray, widthArr, heightArr);")
    private static native void GetTexDataAsRGBA32NATIVE(int addr, int pixelBufferAddr, int widthAddr, int heightAddr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected ImFontAtlas(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static ImFontAtlas createInstance() {
        return new ImFontAtlas((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = imgui.wrapPointer(this_addr, imgui.ImFontAtlas);
      imgui.destroy(jsObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = imgui.wrapPointer(this_addr, imgui.ImFontAtlas);imgui.destroy(jsObj);")
    public static native void internal_native_deleteNative(int this_addr);

    public ImFont AddFont(ImFontConfig font_cfg) {
        int pointer = internal_native_AddFont(native_address, font_cfg.native_address);
        if (pointer == 0)
            return null;
        if (ImFont_TEMP_GEN_0 == null)
            ImFont_TEMP_GEN_0 = ImFont.createInstance();
        ImFont_TEMP_GEN_0.internal_reset(pointer, false);
        return ImFont_TEMP_GEN_0;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = imgui.wrapPointer(this_addr, imgui.ImFontAtlas);
      var returnedJSObj = jsObj.AddFont(font_cfg_addr);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return imgui.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "font_cfg_addr"}, script = "var jsObj = imgui.wrapPointer(this_addr, imgui.ImFontAtlas);var returnedJSObj = jsObj.AddFont(font_cfg_addr);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return imgui.getPointer(returnedJSObj);")
    public static native int internal_native_AddFont(int this_addr, int font_cfg_addr);

    public ImFont AddFontFromMemoryTTF(IDLBase font_data, int font_data_size, int size_pixels) {
        int pointer = internal_native_AddFontFromMemoryTTF(native_address, font_data.native_void_address, font_data_size, size_pixels);
        if (pointer == 0)
            return null;
        if (ImFont_TEMP_GEN_1 == null)
            ImFont_TEMP_GEN_1 = ImFont.createInstance();
        ImFont_TEMP_GEN_1.internal_reset(pointer, false);
        return ImFont_TEMP_GEN_1;
    }

    /*
      [-TEAVM;-NATIVE]
      var jsObj = imgui.wrapPointer(this_addr, imgui.ImFontAtlas);
      var returnedJSObj = jsObj.AddFontFromMemoryTTF(font_data_addr, font_data_size, size_pixels);
      if(!returnedJSObj.hasOwnProperty('ptr')) return 0;
      return imgui.getPointer(returnedJSObj);
    */
    @org.teavm.jso.JSBody(params = {"this_addr", "font_data_addr", "font_data_size", "size_pixels"}, script = "var jsObj = imgui.wrapPointer(this_addr, imgui.ImFontAtlas);var returnedJSObj = jsObj.AddFontFromMemoryTTF(font_data_addr, font_data_size, size_pixels);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return imgui.getPointer(returnedJSObj);")
    public static native int internal_native_AddFontFromMemoryTTF(int this_addr, int font_data_addr, int font_data_size, int size_pixels);
}
