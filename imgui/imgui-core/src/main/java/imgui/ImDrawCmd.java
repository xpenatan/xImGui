/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package imgui;

import com.github.xpenatan.jParser.idl.IDLBase;

public class ImDrawCmd extends IDLBase {

    private ImVec4 ImVec4_TEMP_GEN_0;

    private IDLBase IDLBase_TEMP_GEN_0;

    static public final ImDrawCmd NULL = ImDrawCmd.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected ImDrawCmd(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static ImDrawCmd native_new() {
        return new ImDrawCmd((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public ImVec4 get_ClipRect() {
        long pointer = internal_native_get_ClipRect(native_address);
        if (pointer == 0)
            return ImVec4.NULL;
        if (ImVec4_TEMP_GEN_0 == null)
            ImVec4_TEMP_GEN_0 = ImVec4.native_new();
        ImVec4_TEMP_GEN_0.internal_reset(pointer, false);
        return ImVec4_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
return (jlong)&nativeObject->ClipRect;
*/
    public static native long internal_native_get_ClipRect(long this_addr);

    public void set_ClipRect(ImVec4 ClipRect) {
        internal_native_set_ClipRect(native_address, ClipRect.native_address);
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
nativeObject->ClipRect = *((ImVec4*)ClipRect_addr);
*/
    public static native void internal_native_set_ClipRect(long this_addr, long ClipRect_addr);

    public int get_VtxOffset() {
        return internal_native_get_VtxOffset(native_address);
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
return nativeObject->VtxOffset;
*/
    public static native int internal_native_get_VtxOffset(long this_addr);

    public void set_VtxOffset(int VtxOffset) {
        internal_native_set_VtxOffset(native_address, VtxOffset);
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
nativeObject->VtxOffset = VtxOffset;
*/
    public static native void internal_native_set_VtxOffset(long this_addr, int VtxOffset);

    public int get_IdxOffset() {
        return internal_native_get_IdxOffset(native_address);
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
return nativeObject->IdxOffset;
*/
    public static native int internal_native_get_IdxOffset(long this_addr);

    public void set_IdxOffset(int IdxOffset) {
        internal_native_set_IdxOffset(native_address, IdxOffset);
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
nativeObject->IdxOffset = IdxOffset;
*/
    public static native void internal_native_set_IdxOffset(long this_addr, int IdxOffset);

    public int get_ElemCount() {
        return internal_native_get_ElemCount(native_address);
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
return nativeObject->ElemCount;
*/
    public static native int internal_native_get_ElemCount(long this_addr);

    public void set_ElemCount(int ElemCount) {
        internal_native_set_ElemCount(native_address, ElemCount);
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
nativeObject->ElemCount = ElemCount;
*/
    public static native void internal_native_set_ElemCount(long this_addr, int ElemCount);

    public IDLBase get_TextureId() {
        long pointer = internal_native_get_TextureId(native_address);
        if (pointer == 0)
            return IDLBase.NULL;
        if (IDLBase_TEMP_GEN_0 == null)
            IDLBase_TEMP_GEN_0 = IDLBase.native_new();
        IDLBase_TEMP_GEN_0.internal_reset(pointer, false);
        return IDLBase_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
return (jlong)nativeObject->TextureId;
*/
    public static native long internal_native_get_TextureId(long this_addr);

    public void set_TextureId(IDLBase TextureId) {
        internal_native_set_TextureId(native_address, TextureId.native_void_address);
    }

    /*[-JNI;-NATIVE]
ImDrawCmd* nativeObject = (ImDrawCmd*)this_addr;
nativeObject->TextureId = (void**)TextureId_addr;
*/
    public static native void internal_native_set_TextureId(long this_addr, long TextureId_addr);
}
