/*
  -------------------------------------------------------
   This file was generated by JParser
 
   Do not make changes to this file
  -------------------------------------------------------
*/
package imgui;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import imgui.idl.IDLBase;
import imgui.idl.helper.IDLByteArray;

public class ImDrawList extends IDLBase {

    private ImVec2 ImVec2_TEMP_GEN_0;

    private ImVec2 ImVec2_TEMP_GEN_1;

    private VecCmdBuffer VecCmdBuffer_TEMP_GEN_0;

    private VecIdxBuffer VecIdxBuffer_TEMP_GEN_0;

    private VecVtxBuffer VecVtxBuffer_TEMP_GEN_0;

    /*
      [-JNI;-NATIVE]
              static int DRAWLIST_TYPE_DEFAULT = 0;
              static int DRAWLIST_TYPE_BACKGROUND = 1;
              static int DRAWLIST_TYPE_FOREGROUND = 2;
     
              ImDrawList * getDrawList(int type) {
                  ImDrawList* drawList = NULL;
                  if(type == DRAWLIST_TYPE_DEFAULT)
                      drawList = ImGui::GetWindowDrawList();
                  else if(type == DRAWLIST_TYPE_BACKGROUND)
                      drawList = ImGui::GetBackgroundDrawList();
                  else if(type == DRAWLIST_TYPE_FOREGROUND)
                      drawList = ImGui::GetForegroundDrawList();
                  return drawList;
              }
    */
    // = ImVec2 + ImVec2 + ImU32;
    public final static int VTX_BUFFER_SIZE = 8 + 8 + 4;

    // short
    public final static int IDX_BUFFER_SIZE = 2;

    // = ImVec4 + ImTextureID + int + int + int
    public final static int cmdBufferSize = (1 + 4 + 1) * 4;

    private static final int RESIZE_FACTOR = 5_000;

    public final static int TYPE_DEFAULT = 0;

    public final static int TYPE_BACKGROUND = 1;

    public final static int TYPE_FOREGROUND = 2;

    private int type = TYPE_DEFAULT;

    public final static ImDrawList NULL = native_new();

    IDLByteArray vtxBuffer;

    IDLByteArray idxBuffer;

    public ByteBuffer vtxByteBuffer;

    public ByteBuffer idxByteBuffer;

    private ImDrawCmd imDrawCmd = ImDrawCmd.native_new();

    public static ImDrawList native_new() {
        return new ImDrawList((byte) 0, (char) 0);
    }

    private ImDrawList(byte v, char c) {
    }

    public ImDrawList(int type) {
        this.type = type;
    }

    public int getFlags() {
        return getFlagsNATIVE(native_address);
    }

    /*
      [-JNI;-NATIVE]
              ImDrawList* nativeObject = (ImDrawList*)addr;
              return nativeObject->Flags;
    */
    private static native int getFlagsNATIVE(long addr);

    public ImDrawCmd getCmdBuffer(int index) {
        long pointer = getCmdBufferNATIVE(native_address, index);
        imDrawCmd.internal_reset(pointer, false);
        return imDrawCmd;
    }

    /*
      [-JNI;-NATIVE]
              ImDrawList* nativeObject = (ImDrawList*)addr;
              return (jlong)&nativeObject->CmdBuffer.Data[index];
    */
    private static native long getCmdBufferNATIVE(long addr, int index);

    public int getCmdBufferSize() {
        return getCmdBufferSizeNATIVE(native_address);
    }

    /*
      [-JNI;-NATIVE]
              ImDrawList* nativeObject = (ImDrawList*)addr;
              return nativeObject->CmdBuffer.size();
    */
    private static native int getCmdBufferSizeNATIVE(long addr);

    public ByteBuffer getIdxBufferData() {
        int idxBufferSize = getIdxBufferSizeNATIVE(native_address);
        int idxBufferCapacity = idxBufferSize * IDX_BUFFER_SIZE;
        if (idxByteBuffer == null || idxByteBuffer.capacity() < idxBufferCapacity) {
            if (idxByteBuffer != null) {
                idxByteBuffer.clear();
            }
            if (idxBuffer != null) {
                idxBuffer.dispose();
            }
            idxBuffer = new IDLByteArray(idxBufferCapacity + RESIZE_FACTOR);
            idxByteBuffer = ByteBuffer.allocateDirect(idxBufferCapacity + RESIZE_FACTOR).order(ByteOrder.nativeOrder());
        }
        getIdxBufferDataNATIVE(native_address, idxBuffer.native_address, idxBufferCapacity);
        idxByteBuffer.position(0);
        idxByteBuffer.limit(idxBufferCapacity);
        for (int i = 0; i < idxBufferCapacity; i++) {
            idxByteBuffer.put(i, idxBuffer.getValue(i));
        }
        idxByteBuffer.position(0);
        idxByteBuffer.limit(idxBufferCapacity);
        return idxByteBuffer;
    }

    /*
      [-JNI;-NATIVE]
              ImDrawList* nativeObject = (ImDrawList*)addr;
              IDLByteArray* charArray = (IDLByteArray*)bufferAddr;
              ImHelper::memcpyIdx(charArray->getPointer(), nativeObject, bufferCapacity);
    */
    private static native void getIdxBufferDataNATIVE(long addr, long bufferAddr, int bufferCapacity);

    /*
      [-JNI;-NATIVE]
              ImDrawList* nativeObject = (ImDrawList*)addr;
              return nativeObject->IdxBuffer.size();
    */
    private static native int getIdxBufferSizeNATIVE(long addr);

    public ByteBuffer getVtxBufferData() {
        int vtxBufferSize = getVtxBufferSizeNATIVE(native_address);
        int vtxBufferCapacity = vtxBufferSize * VTX_BUFFER_SIZE;
        if (vtxByteBuffer == null || vtxByteBuffer.capacity() < vtxBufferCapacity) {
            if (vtxByteBuffer != null) {
                vtxByteBuffer.clear();
            }
            if (vtxBuffer != null) {
                vtxBuffer.dispose();
            }
            vtxBuffer = new IDLByteArray(vtxBufferCapacity + RESIZE_FACTOR);
            vtxByteBuffer = ByteBuffer.allocateDirect(vtxBufferCapacity + RESIZE_FACTOR).order(ByteOrder.nativeOrder());
        }
        // TODO find a better way to get native byte buffer for c++ and teavm
        getVtxBufferDataNATIVE(native_address, vtxBuffer.native_address, vtxBufferCapacity);
        vtxByteBuffer.position(0);
        vtxByteBuffer.limit(vtxBufferCapacity);
        for (int i = 0; i < vtxBufferCapacity; i++) {
            vtxByteBuffer.put(i, vtxBuffer.getValue(i));
        }
        vtxByteBuffer.position(0);
        vtxByteBuffer.limit(vtxBufferCapacity);
        return vtxByteBuffer;
    }

    /*
      [-JNI;-NATIVE]
              ImDrawList* nativeObject = (ImDrawList*)addr;
              IDLByteArray* charArray = (IDLByteArray*)bufferAddr;
              ImHelper::memcpyVtx(charArray->getPointer(), nativeObject, bufferCapacity);
    */
    private static native void getVtxBufferDataNATIVE(long addr, long bufferAddr, int bufferCapacity);

    /*
      [-JNI;-NATIVE]
              ImDrawList* nativeObject = (ImDrawList*)addr;
              return nativeObject->VtxBuffer.size();
    */
    private static native int getVtxBufferSizeNATIVE(long addr);

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      delete nativeObject;
    */
    public static native void internal_native_deleteNative(long this_addr);

    public void PushClipRect(ImVec2 cr_min, ImVec2 cr_max, boolean intersect_with_current_clip_rect) {
        internal_native_PushClipRect(native_address, cr_min.native_address, cr_max.native_address, intersect_with_current_clip_rect);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PushClipRect(*((ImVec2* )cr_min_addr), *((ImVec2* )cr_max_addr), intersect_with_current_clip_rect);
    */
    public static native void internal_native_PushClipRect(long this_addr, long cr_min_addr, long cr_max_addr, boolean intersect_with_current_clip_rect);

    public void PushClipRect(ImVec2 cr_min, ImVec2 cr_max) {
        internal_native_PushClipRect(native_address, cr_min.native_address, cr_max.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PushClipRect(*((ImVec2* )cr_min_addr), *((ImVec2* )cr_max_addr));
    */
    public static native void internal_native_PushClipRect(long this_addr, long cr_min_addr, long cr_max_addr);

    public void PushClipRectFullScreen() {
        internal_native_PushClipRectFullScreen(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PushClipRectFullScreen();
    */
    public static native void internal_native_PushClipRectFullScreen(long this_addr);

    public void PopClipRect() {
        internal_native_PopClipRect(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PopClipRect();
    */
    public static native void internal_native_PopClipRect(long this_addr);

    public void PushTextureID(IDLBase user_texture_id) {
        internal_native_PushTextureID(native_address, user_texture_id.native_void_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PushTextureID((void** )user_texture_id_addr);
    */
    public static native void internal_native_PushTextureID(long this_addr, long user_texture_id_addr);

    public void PopTextureID() {
        internal_native_PopTextureID(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PopTextureID();
    */
    public static native void internal_native_PopTextureID(long this_addr);

    public ImVec2 GetClipRectMin() {
        long pointer = internal_native_GetClipRectMin(native_address);
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_GEN_0 == null)
            ImVec2_TEMP_GEN_0 = ImVec2.native_new();
        ImVec2_TEMP_GEN_0.internal_reset(pointer, false);
        return ImVec2_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      static ImVec2 copy_addr;
      copy_addr = nativeObject->GetClipRectMin();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetClipRectMin(long this_addr);

    public ImVec2 GetClipRectMax() {
        long pointer = internal_native_GetClipRectMax(native_address);
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_GEN_1 == null)
            ImVec2_TEMP_GEN_1 = ImVec2.native_new();
        ImVec2_TEMP_GEN_1.internal_reset(pointer, false);
        return ImVec2_TEMP_GEN_1;
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      static ImVec2 copy_addr;
      copy_addr = nativeObject->GetClipRectMax();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetClipRectMax(long this_addr);

    public void AddLine(ImVec2 p1, ImVec2 p2, int col, float thickness) {
        internal_native_AddLine(native_address, p1.native_address, p2.native_address, col, thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddLine(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), (int)col, (float)thickness);
    */
    public static native void internal_native_AddLine(long this_addr, long p1_addr, long p2_addr, int col, float thickness);

    public void AddLine(ImVec2 p1, ImVec2 p2, int col) {
        internal_native_AddLine(native_address, p1.native_address, p2.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddLine(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), (int)col);
    */
    public static native void internal_native_AddLine(long this_addr, long p1_addr, long p2_addr, int col);

    public void AddRect(ImVec2 p_min, ImVec2 p_max, int col, float rounding, ImDrawFlags ImDrawFlags, float thickness) {
        internal_native_AddRect(native_address, p_min.native_address, p_max.native_address, col, rounding, ImDrawFlags.getValue(), thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddRect(*((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), (int)col, (float)rounding, (::ImDrawFlags)ImDrawFlags, (float)thickness);
    */
    public static native void internal_native_AddRect(long this_addr, long p_min_addr, long p_max_addr, int col, float rounding, long ImDrawFlags, float thickness);

    public void AddRect(ImVec2 p_min, ImVec2 p_max, int col, float rounding, ImDrawFlags ImDrawFlags) {
        internal_native_AddRect(native_address, p_min.native_address, p_max.native_address, col, rounding, ImDrawFlags.getValue());
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddRect(*((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), (int)col, (float)rounding, (::ImDrawFlags)ImDrawFlags);
    */
    public static native void internal_native_AddRect(long this_addr, long p_min_addr, long p_max_addr, int col, float rounding, long ImDrawFlags);

    public void AddRect(ImVec2 p_min, ImVec2 p_max, int col, float rounding) {
        internal_native_AddRect(native_address, p_min.native_address, p_max.native_address, col, rounding);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddRect(*((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), (int)col, (float)rounding);
    */
    public static native void internal_native_AddRect(long this_addr, long p_min_addr, long p_max_addr, int col, float rounding);

    public void AddRect(ImVec2 p_min, ImVec2 p_max, int col) {
        internal_native_AddRect(native_address, p_min.native_address, p_max.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddRect(*((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), (int)col);
    */
    public static native void internal_native_AddRect(long this_addr, long p_min_addr, long p_max_addr, int col);

    public void AddRectFilled(ImVec2 p_min, ImVec2 p_max, int col, float rounding, ImDrawFlags ImDrawFlags) {
        internal_native_AddRectFilled(native_address, p_min.native_address, p_max.native_address, col, rounding, ImDrawFlags.getValue());
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddRectFilled(*((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), (int)col, (float)rounding, (::ImDrawFlags)ImDrawFlags);
    */
    public static native void internal_native_AddRectFilled(long this_addr, long p_min_addr, long p_max_addr, int col, float rounding, long ImDrawFlags);

    public void AddRectFilled(ImVec2 p_min, ImVec2 p_max, int col, float rounding) {
        internal_native_AddRectFilled(native_address, p_min.native_address, p_max.native_address, col, rounding);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddRectFilled(*((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), (int)col, (float)rounding);
    */
    public static native void internal_native_AddRectFilled(long this_addr, long p_min_addr, long p_max_addr, int col, float rounding);

    public void AddRectFilled(ImVec2 p_min, ImVec2 p_max, int col) {
        internal_native_AddRectFilled(native_address, p_min.native_address, p_max.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddRectFilled(*((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), (int)col);
    */
    public static native void internal_native_AddRectFilled(long this_addr, long p_min_addr, long p_max_addr, int col);

    public void AddRectFilledMultiColor(ImVec2 p_min, ImVec2 p_max, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left) {
        internal_native_AddRectFilledMultiColor(native_address, p_min.native_address, p_max.native_address, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddRectFilledMultiColor(*((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), (int)col_upr_left, (int)col_upr_right, (int)col_bot_right, (int)col_bot_left);
    */
    public static native void internal_native_AddRectFilledMultiColor(long this_addr, long p_min_addr, long p_max_addr, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left);

    public void AddQuad(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, int col, float thickness) {
        internal_native_AddQuad(native_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, col, thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddQuad(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), (int)col, (float)thickness);
    */
    public static native void internal_native_AddQuad(long this_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, int col, float thickness);

    public void AddQuad(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, int col) {
        internal_native_AddQuad(native_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddQuad(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), (int)col);
    */
    public static native void internal_native_AddQuad(long this_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, int col);

    public void AddQuadFilled(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, int col) {
        internal_native_AddQuadFilled(native_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddQuadFilled(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), (int)col);
    */
    public static native void internal_native_AddQuadFilled(long this_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, int col);

    public void AddTriangle(ImVec2 p1, ImVec2 p2, ImVec2 p3, int col, float thickness) {
        internal_native_AddTriangle(native_address, p1.native_address, p2.native_address, p3.native_address, col, thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddTriangle(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), (int)col, (float)thickness);
    */
    public static native void internal_native_AddTriangle(long this_addr, long p1_addr, long p2_addr, long p3_addr, int col, float thickness);

    public void AddTriangle(ImVec2 p1, ImVec2 p2, ImVec2 p3, int col) {
        internal_native_AddTriangle(native_address, p1.native_address, p2.native_address, p3.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddTriangle(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), (int)col);
    */
    public static native void internal_native_AddTriangle(long this_addr, long p1_addr, long p2_addr, long p3_addr, int col);

    public void AddTriangleFilled(ImVec2 p1, ImVec2 p2, ImVec2 p3, int col) {
        internal_native_AddTriangleFilled(native_address, p1.native_address, p2.native_address, p3.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddTriangleFilled(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), (int)col);
    */
    public static native void internal_native_AddTriangleFilled(long this_addr, long p1_addr, long p2_addr, long p3_addr, int col);

    public void AddCircle(ImVec2 center, float radius, int col, int num_segments, float thickness) {
        internal_native_AddCircle(native_address, center.native_address, radius, col, num_segments, thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddCircle(*((ImVec2* )center_addr), (float)radius, (int)col, (int)num_segments, (float)thickness);
    */
    public static native void internal_native_AddCircle(long this_addr, long center_addr, float radius, int col, int num_segments, float thickness);

    public void AddCircle(ImVec2 center, float radius, int col, int num_segments) {
        internal_native_AddCircle(native_address, center.native_address, radius, col, num_segments);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddCircle(*((ImVec2* )center_addr), (float)radius, (int)col, (int)num_segments);
    */
    public static native void internal_native_AddCircle(long this_addr, long center_addr, float radius, int col, int num_segments);

    public void AddCircle(ImVec2 center, float radius, int col) {
        internal_native_AddCircle(native_address, center.native_address, radius, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddCircle(*((ImVec2* )center_addr), (float)radius, (int)col);
    */
    public static native void internal_native_AddCircle(long this_addr, long center_addr, float radius, int col);

    public void AddCircleFilled(ImVec2 center, float radius, int col, int num_segments) {
        internal_native_AddCircleFilled(native_address, center.native_address, radius, col, num_segments);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddCircleFilled(*((ImVec2* )center_addr), (float)radius, (int)col, (int)num_segments);
    */
    public static native void internal_native_AddCircleFilled(long this_addr, long center_addr, float radius, int col, int num_segments);

    public void AddCircleFilled(ImVec2 center, float radius, int col) {
        internal_native_AddCircleFilled(native_address, center.native_address, radius, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddCircleFilled(*((ImVec2* )center_addr), (float)radius, (int)col);
    */
    public static native void internal_native_AddCircleFilled(long this_addr, long center_addr, float radius, int col);

    public void AddNgon(ImVec2 center, float radius, int col, int num_segments, float thickness) {
        internal_native_AddNgon(native_address, center.native_address, radius, col, num_segments, thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddNgon(*((ImVec2* )center_addr), (float)radius, (int)col, (int)num_segments, (float)thickness);
    */
    public static native void internal_native_AddNgon(long this_addr, long center_addr, float radius, int col, int num_segments, float thickness);

    public void AddNgon(ImVec2 center, float radius, int col, int num_segments) {
        internal_native_AddNgon(native_address, center.native_address, radius, col, num_segments);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddNgon(*((ImVec2* )center_addr), (float)radius, (int)col, (int)num_segments);
    */
    public static native void internal_native_AddNgon(long this_addr, long center_addr, float radius, int col, int num_segments);

    public void AddNgonFilled(ImVec2 center, float radius, int col, int num_segments) {
        internal_native_AddNgonFilled(native_address, center.native_address, radius, col, num_segments);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddNgonFilled(*((ImVec2* )center_addr), (float)radius, (int)col, (int)num_segments);
    */
    public static native void internal_native_AddNgonFilled(long this_addr, long center_addr, float radius, int col, int num_segments);

    public void AddEllipse(ImVec2 center, ImVec2 radius, int col, float rot, int num_segments, float thickness) {
        internal_native_AddEllipse(native_address, center.native_address, radius.native_address, col, rot, num_segments, thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddEllipse(*((ImVec2* )center_addr), *((ImVec2* )radius_addr), (int)col, (float)rot, (int)num_segments, (float)thickness);
    */
    public static native void internal_native_AddEllipse(long this_addr, long center_addr, long radius_addr, int col, float rot, int num_segments, float thickness);

    public void AddEllipse(ImVec2 center, ImVec2 radius, int col, float rot, int num_segments) {
        internal_native_AddEllipse(native_address, center.native_address, radius.native_address, col, rot, num_segments);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddEllipse(*((ImVec2* )center_addr), *((ImVec2* )radius_addr), (int)col, (float)rot, (int)num_segments);
    */
    public static native void internal_native_AddEllipse(long this_addr, long center_addr, long radius_addr, int col, float rot, int num_segments);

    public void AddEllipse(ImVec2 center, ImVec2 radius, int col, float rot) {
        internal_native_AddEllipse(native_address, center.native_address, radius.native_address, col, rot);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddEllipse(*((ImVec2* )center_addr), *((ImVec2* )radius_addr), (int)col, (float)rot);
    */
    public static native void internal_native_AddEllipse(long this_addr, long center_addr, long radius_addr, int col, float rot);

    public void AddEllipse(ImVec2 center, ImVec2 radius, int col) {
        internal_native_AddEllipse(native_address, center.native_address, radius.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddEllipse(*((ImVec2* )center_addr), *((ImVec2* )radius_addr), (int)col);
    */
    public static native void internal_native_AddEllipse(long this_addr, long center_addr, long radius_addr, int col);

    public void AddEllipseFilled(ImVec2 center, ImVec2 radius, int col, float rot, int num_segments) {
        internal_native_AddEllipseFilled(native_address, center.native_address, radius.native_address, col, rot, num_segments);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddEllipseFilled(*((ImVec2* )center_addr), *((ImVec2* )radius_addr), (int)col, (float)rot, (int)num_segments);
    */
    public static native void internal_native_AddEllipseFilled(long this_addr, long center_addr, long radius_addr, int col, float rot, int num_segments);

    public void AddEllipseFilled(ImVec2 center, ImVec2 radius, int col, float rot) {
        internal_native_AddEllipseFilled(native_address, center.native_address, radius.native_address, col, rot);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddEllipseFilled(*((ImVec2* )center_addr), *((ImVec2* )radius_addr), (int)col, (float)rot);
    */
    public static native void internal_native_AddEllipseFilled(long this_addr, long center_addr, long radius_addr, int col, float rot);

    public void AddEllipseFilled(ImVec2 center, ImVec2 radius, int col) {
        internal_native_AddEllipseFilled(native_address, center.native_address, radius.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddEllipseFilled(*((ImVec2* )center_addr), *((ImVec2* )radius_addr), (int)col);
    */
    public static native void internal_native_AddEllipseFilled(long this_addr, long center_addr, long radius_addr, int col);

    public void AddText(ImVec2 pos, int col, String text_begin, String text_end) {
        internal_native_AddText(native_address, pos.native_address, col, text_begin, text_end);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddText(*((ImVec2* )pos_addr), (int)col, text_begin, text_end);
    */
    public static native void internal_native_AddText(long this_addr, long pos_addr, int col, String text_begin, String text_end);

    public void AddText(ImVec2 pos, int col, String text_begin) {
        internal_native_AddText(native_address, pos.native_address, col, text_begin);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddText(*((ImVec2* )pos_addr), (int)col, text_begin);
    */
    public static native void internal_native_AddText(long this_addr, long pos_addr, int col, String text_begin);

    public void AddText(ImFont font, float font_size, ImVec2 pos, int col, String text_begin, String text_end, float wrap_width, ImVec4 cpu_fine_clip_rect) {
        internal_native_AddText(native_address, font.native_address, font_size, pos.native_address, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddText((ImFont* )font_addr, (float)font_size, *((ImVec2* )pos_addr), (int)col, text_begin, text_end, (float)wrap_width, (ImVec4* )cpu_fine_clip_rect_addr);
    */
    public static native void internal_native_AddText(long this_addr, long font_addr, float font_size, long pos_addr, int col, String text_begin, String text_end, float wrap_width, long cpu_fine_clip_rect_addr);

    public void AddText(ImFont font, float font_size, ImVec2 pos, int col, String text_begin, String text_end, float wrap_width) {
        internal_native_AddText(native_address, font.native_address, font_size, pos.native_address, col, text_begin, text_end, wrap_width);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddText((ImFont* )font_addr, (float)font_size, *((ImVec2* )pos_addr), (int)col, text_begin, text_end, (float)wrap_width);
    */
    public static native void internal_native_AddText(long this_addr, long font_addr, float font_size, long pos_addr, int col, String text_begin, String text_end, float wrap_width);

    public void AddText(ImFont font, float font_size, ImVec2 pos, int col, String text_begin, String text_end) {
        internal_native_AddText(native_address, font.native_address, font_size, pos.native_address, col, text_begin, text_end);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddText((ImFont* )font_addr, (float)font_size, *((ImVec2* )pos_addr), (int)col, text_begin, text_end);
    */
    public static native void internal_native_AddText(long this_addr, long font_addr, float font_size, long pos_addr, int col, String text_begin, String text_end);

    public void AddText(ImFont font, float font_size, ImVec2 pos, int col, String text_begin) {
        internal_native_AddText(native_address, font.native_address, font_size, pos.native_address, col, text_begin);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddText((ImFont* )font_addr, (float)font_size, *((ImVec2* )pos_addr), (int)col, text_begin);
    */
    public static native void internal_native_AddText(long this_addr, long font_addr, float font_size, long pos_addr, int col, String text_begin);

    public void AddBezierCubic(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, int col, float thickness, int num_segments) {
        internal_native_AddBezierCubic(native_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, col, thickness, num_segments);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddBezierCubic(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), (int)col, (float)thickness, (int)num_segments);
    */
    public static native void internal_native_AddBezierCubic(long this_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, int col, float thickness, int num_segments);

    public void AddBezierCubic(ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, int col, float thickness) {
        internal_native_AddBezierCubic(native_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, col, thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddBezierCubic(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), (int)col, (float)thickness);
    */
    public static native void internal_native_AddBezierCubic(long this_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, int col, float thickness);

    public void AddBezierQuadratic(ImVec2 p1, ImVec2 p2, ImVec2 p3, int col, float thickness, int num_segments) {
        internal_native_AddBezierQuadratic(native_address, p1.native_address, p2.native_address, p3.native_address, col, thickness, num_segments);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddBezierQuadratic(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), (int)col, (float)thickness, (int)num_segments);
    */
    public static native void internal_native_AddBezierQuadratic(long this_addr, long p1_addr, long p2_addr, long p3_addr, int col, float thickness, int num_segments);

    public void AddBezierQuadratic(ImVec2 p1, ImVec2 p2, ImVec2 p3, int col, float thickness) {
        internal_native_AddBezierQuadratic(native_address, p1.native_address, p2.native_address, p3.native_address, col, thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddBezierQuadratic(*((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), (int)col, (float)thickness);
    */
    public static native void internal_native_AddBezierQuadratic(long this_addr, long p1_addr, long p2_addr, long p3_addr, int col, float thickness);

    public void AddImage(IDLBase user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, int col) {
        internal_native_AddImage(native_address, user_texture_id.native_void_address, p_min.native_address, p_max.native_address, uv_min.native_address, uv_max.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImage((void** )user_texture_id_addr, *((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), *((ImVec2* )uv_min_addr), *((ImVec2* )uv_max_addr), (int)col);
    */
    public static native void internal_native_AddImage(long this_addr, long user_texture_id_addr, long p_min_addr, long p_max_addr, long uv_min_addr, long uv_max_addr, int col);

    public void AddImage(IDLBase user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max) {
        internal_native_AddImage(native_address, user_texture_id.native_void_address, p_min.native_address, p_max.native_address, uv_min.native_address, uv_max.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImage((void** )user_texture_id_addr, *((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), *((ImVec2* )uv_min_addr), *((ImVec2* )uv_max_addr));
    */
    public static native void internal_native_AddImage(long this_addr, long user_texture_id_addr, long p_min_addr, long p_max_addr, long uv_min_addr, long uv_max_addr);

    public void AddImage(IDLBase user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min) {
        internal_native_AddImage(native_address, user_texture_id.native_void_address, p_min.native_address, p_max.native_address, uv_min.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImage((void** )user_texture_id_addr, *((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), *((ImVec2* )uv_min_addr));
    */
    public static native void internal_native_AddImage(long this_addr, long user_texture_id_addr, long p_min_addr, long p_max_addr, long uv_min_addr);

    public void AddImage(IDLBase user_texture_id, ImVec2 p_min, ImVec2 p_max) {
        internal_native_AddImage(native_address, user_texture_id.native_void_address, p_min.native_address, p_max.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImage((void** )user_texture_id_addr, *((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr));
    */
    public static native void internal_native_AddImage(long this_addr, long user_texture_id_addr, long p_min_addr, long p_max_addr);

    public void AddImageQuad(IDLBase user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2, ImVec2 uv3, ImVec2 uv4, int col) {
        internal_native_AddImageQuad(native_address, user_texture_id.native_void_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, uv1.native_address, uv2.native_address, uv3.native_address, uv4.native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImageQuad((void** )user_texture_id_addr, *((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), *((ImVec2* )uv1_addr), *((ImVec2* )uv2_addr), *((ImVec2* )uv3_addr), *((ImVec2* )uv4_addr), (int)col);
    */
    public static native void internal_native_AddImageQuad(long this_addr, long user_texture_id_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, long uv1_addr, long uv2_addr, long uv3_addr, long uv4_addr, int col);

    public void AddImageQuad(IDLBase user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2, ImVec2 uv3, ImVec2 uv4) {
        internal_native_AddImageQuad(native_address, user_texture_id.native_void_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, uv1.native_address, uv2.native_address, uv3.native_address, uv4.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImageQuad((void** )user_texture_id_addr, *((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), *((ImVec2* )uv1_addr), *((ImVec2* )uv2_addr), *((ImVec2* )uv3_addr), *((ImVec2* )uv4_addr));
    */
    public static native void internal_native_AddImageQuad(long this_addr, long user_texture_id_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, long uv1_addr, long uv2_addr, long uv3_addr, long uv4_addr);

    public void AddImageQuad(IDLBase user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2, ImVec2 uv3) {
        internal_native_AddImageQuad(native_address, user_texture_id.native_void_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, uv1.native_address, uv2.native_address, uv3.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImageQuad((void** )user_texture_id_addr, *((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), *((ImVec2* )uv1_addr), *((ImVec2* )uv2_addr), *((ImVec2* )uv3_addr));
    */
    public static native void internal_native_AddImageQuad(long this_addr, long user_texture_id_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, long uv1_addr, long uv2_addr, long uv3_addr);

    public void AddImageQuad(IDLBase user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1, ImVec2 uv2) {
        internal_native_AddImageQuad(native_address, user_texture_id.native_void_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, uv1.native_address, uv2.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImageQuad((void** )user_texture_id_addr, *((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), *((ImVec2* )uv1_addr), *((ImVec2* )uv2_addr));
    */
    public static native void internal_native_AddImageQuad(long this_addr, long user_texture_id_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, long uv1_addr, long uv2_addr);

    public void AddImageQuad(IDLBase user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4, ImVec2 uv1) {
        internal_native_AddImageQuad(native_address, user_texture_id.native_void_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address, uv1.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImageQuad((void** )user_texture_id_addr, *((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr), *((ImVec2* )uv1_addr));
    */
    public static native void internal_native_AddImageQuad(long this_addr, long user_texture_id_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr, long uv1_addr);

    public void AddImageQuad(IDLBase user_texture_id, ImVec2 p1, ImVec2 p2, ImVec2 p3, ImVec2 p4) {
        internal_native_AddImageQuad(native_address, user_texture_id.native_void_address, p1.native_address, p2.native_address, p3.native_address, p4.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImageQuad((void** )user_texture_id_addr, *((ImVec2* )p1_addr), *((ImVec2* )p2_addr), *((ImVec2* )p3_addr), *((ImVec2* )p4_addr));
    */
    public static native void internal_native_AddImageQuad(long this_addr, long user_texture_id_addr, long p1_addr, long p2_addr, long p3_addr, long p4_addr);

    public void AddImageRounded(IDLBase user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, int col, float rounding, ImDrawFlags ImDrawFlags) {
        internal_native_AddImageRounded(native_address, user_texture_id.native_void_address, p_min.native_address, p_max.native_address, uv_min.native_address, uv_max.native_address, col, rounding, ImDrawFlags.getValue());
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImageRounded((void** )user_texture_id_addr, *((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), *((ImVec2* )uv_min_addr), *((ImVec2* )uv_max_addr), (int)col, (float)rounding, (::ImDrawFlags)ImDrawFlags);
    */
    public static native void internal_native_AddImageRounded(long this_addr, long user_texture_id_addr, long p_min_addr, long p_max_addr, long uv_min_addr, long uv_max_addr, int col, float rounding, long ImDrawFlags);

    public void AddImageRounded(IDLBase user_texture_id, ImVec2 p_min, ImVec2 p_max, ImVec2 uv_min, ImVec2 uv_max, int col, float rounding) {
        internal_native_AddImageRounded(native_address, user_texture_id.native_void_address, p_min.native_address, p_max.native_address, uv_min.native_address, uv_max.native_address, col, rounding);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->AddImageRounded((void** )user_texture_id_addr, *((ImVec2* )p_min_addr), *((ImVec2* )p_max_addr), *((ImVec2* )uv_min_addr), *((ImVec2* )uv_max_addr), (int)col, (float)rounding);
    */
    public static native void internal_native_AddImageRounded(long this_addr, long user_texture_id_addr, long p_min_addr, long p_max_addr, long uv_min_addr, long uv_max_addr, int col, float rounding);

    public void PathClear() {
        internal_native_PathClear(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PathClear();
    */
    public static native void internal_native_PathClear(long this_addr);

    public void PathLineTo(ImVec2 pos) {
        internal_native_PathLineTo(native_address, pos.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PathLineTo(*((ImVec2* )pos_addr));
    */
    public static native void internal_native_PathLineTo(long this_addr, long pos_addr);

    public void PathLineToMergeDuplicate(ImVec2 pos) {
        internal_native_PathLineToMergeDuplicate(native_address, pos.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PathLineToMergeDuplicate(*((ImVec2* )pos_addr));
    */
    public static native void internal_native_PathLineToMergeDuplicate(long this_addr, long pos_addr);

    public void PathFillConvex(int col) {
        internal_native_PathFillConvex(native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PathFillConvex((int)col);
    */
    public static native void internal_native_PathFillConvex(long this_addr, int col);

    public void PathStroke(int col, ImDrawFlags ImDrawFlags, float thickness) {
        internal_native_PathStroke(native_address, col, ImDrawFlags.getValue(), thickness);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PathStroke((int)col, (::ImDrawFlags)ImDrawFlags, (float)thickness);
    */
    public static native void internal_native_PathStroke(long this_addr, int col, long ImDrawFlags, float thickness);

    public void PathStroke(int col, ImDrawFlags ImDrawFlags) {
        internal_native_PathStroke(native_address, col, ImDrawFlags.getValue());
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PathStroke((int)col, (::ImDrawFlags)ImDrawFlags);
    */
    public static native void internal_native_PathStroke(long this_addr, int col, long ImDrawFlags);

    public void PathStroke(int col) {
        internal_native_PathStroke(native_address, col);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->PathStroke((int)col);
    */
    public static native void internal_native_PathStroke(long this_addr, int col);

    public void ChannelsSplit(int count) {
        internal_native_ChannelsSplit(native_address, count);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->ChannelsSplit((int)count);
    */
    public static native void internal_native_ChannelsSplit(long this_addr, int count);

    public void ChannelsMerge() {
        internal_native_ChannelsMerge(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->ChannelsMerge();
    */
    public static native void internal_native_ChannelsMerge(long this_addr);

    public void ChannelsSetCurrent(int n) {
        internal_native_ChannelsSetCurrent(native_address, n);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->ChannelsSetCurrent((int)n);
    */
    public static native void internal_native_ChannelsSetCurrent(long this_addr, int n);

    public VecCmdBuffer get_CmdBuffer() {
        long pointer = internal_native_get_CmdBuffer(native_address);
        if (pointer == 0)
            return VecCmdBuffer.NULL;
        if (VecCmdBuffer_TEMP_GEN_0 == null)
            VecCmdBuffer_TEMP_GEN_0 = VecCmdBuffer.native_new();
        VecCmdBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return VecCmdBuffer_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      return (jlong)&nativeObject->CmdBuffer;
    */
    public static native long internal_native_get_CmdBuffer(long this_addr);

    public void set_CmdBuffer(VecCmdBuffer CmdBuffer) {
        internal_native_set_CmdBuffer(native_address, CmdBuffer.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->CmdBuffer = *((VecCmdBuffer*)CmdBuffer_addr);
    */
    public static native void internal_native_set_CmdBuffer(long this_addr, long CmdBuffer_addr);

    public VecIdxBuffer get_IdxBuffer() {
        long pointer = internal_native_get_IdxBuffer(native_address);
        if (pointer == 0)
            return VecIdxBuffer.NULL;
        if (VecIdxBuffer_TEMP_GEN_0 == null)
            VecIdxBuffer_TEMP_GEN_0 = VecIdxBuffer.native_new();
        VecIdxBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return VecIdxBuffer_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      return (jlong)&nativeObject->IdxBuffer;
    */
    public static native long internal_native_get_IdxBuffer(long this_addr);

    public void set_IdxBuffer(VecIdxBuffer IdxBuffer) {
        internal_native_set_IdxBuffer(native_address, IdxBuffer.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->IdxBuffer = *((VecIdxBuffer*)IdxBuffer_addr);
    */
    public static native void internal_native_set_IdxBuffer(long this_addr, long IdxBuffer_addr);

    public VecVtxBuffer get_VtxBuffer() {
        long pointer = internal_native_get_VtxBuffer(native_address);
        if (pointer == 0)
            return VecVtxBuffer.NULL;
        if (VecVtxBuffer_TEMP_GEN_0 == null)
            VecVtxBuffer_TEMP_GEN_0 = VecVtxBuffer.native_new();
        VecVtxBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return VecVtxBuffer_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      return (jlong)&nativeObject->VtxBuffer;
    */
    public static native long internal_native_get_VtxBuffer(long this_addr);

    public void set_VtxBuffer(VecVtxBuffer VtxBuffer) {
        internal_native_set_VtxBuffer(native_address, VtxBuffer.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImDrawList* nativeObject = (ImDrawList*)this_addr;
      nativeObject->VtxBuffer = *((VecVtxBuffer*)VtxBuffer_addr);
    */
    public static native void internal_native_set_VtxBuffer(long this_addr, long VtxBuffer_addr);
}
