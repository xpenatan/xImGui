/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package imgui;

import imgui.idl.IDLBase;
import imgui.idl.helper.IDLIntArray;
import imgui.idl.helper.IDLBoolArray;
import imgui.idl.helper.IDLFloatArray;

public class ImGuiInternal extends IDLBase {

    static private ImGuiWindow ImGuiWindow_TEMP_STATIC_GEN_0;

    static private ImGuiWindow ImGuiWindow_TEMP_STATIC_GEN_1;

    static private ImGuiWindow ImGuiWindow_TEMP_STATIC_GEN_2;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_0;

    static private ImGuiDockNode ImGuiDockNode_TEMP_STATIC_GEN_0;

    static private ImGuiDockNode ImGuiDockNode_TEMP_STATIC_GEN_1;

    static private ImGuiTabBar ImGuiTabBar_TEMP_STATIC_GEN_0;

    static private ImGuiTabItem ImGuiTabItem_TEMP_STATIC_GEN_0;

    static private ImGuiTabItem ImGuiTabItem_TEMP_STATIC_GEN_1;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_1;

    static private ImVec2 ImVec2_TEMP_STATIC_GEN_2;

    static public final ImGuiInternal NULL = ImGuiInternal.createInstance();

    static public final ImGuiInternal T_01 = ImGuiInternal.createInstance();

    static public final ImGuiInternal T_02 = ImGuiInternal.createInstance();

    static public final ImGuiInternal T_03 = ImGuiInternal.createInstance();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected ImGuiInternal(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static ImGuiInternal createInstance() {
        return new ImGuiInternal((byte) 0, (char) 0);
    }

    public static int ImHashData(String data, int data_size, int seed) {
        return internal_native_ImHashData_1(data, data_size, seed);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ImHashData_1(data, (int)data_size, (int)seed);
*/
    public static native int internal_native_ImHashData_1(String data, int data_size, int seed);

    public static int ImHashData(String data, int data_size) {
        return internal_native_ImHashData_1(data, data_size);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ImHashData_1(data, (int)data_size);
*/
    public static native int internal_native_ImHashData_1(String data, int data_size);

    public static int ImHashStr(String data, int data_size, int seed) {
        return internal_native_ImHashStr_1(data, data_size, seed);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ImHashStr_1(data, (int)data_size, (int)seed);
*/
    public static native int internal_native_ImHashStr_1(String data, int data_size, int seed);

    public static int ImHashStr(String data, int data_size) {
        return internal_native_ImHashStr_1(data, data_size);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ImHashStr_1(data, (int)data_size);
*/
    public static native int internal_native_ImHashStr_1(String data, int data_size);

    public static int ImHashStr(String data) {
        return internal_native_ImHashStr_1(data);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ImHashStr_1(data);
*/
    public static native int internal_native_ImHashStr_1(String data);

    public static ImGuiWindow GetCurrentWindow() {
        long pointer = internal_native_GetCurrentWindow();
        if (pointer == 0)
            return null;
        if (ImGuiWindow_TEMP_STATIC_GEN_0 == null)
            ImGuiWindow_TEMP_STATIC_GEN_0 = ImGuiWindow.createInstance();
        ImGuiWindow_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)ImGuiWrapper::ImGuiInternal::GetCurrentWindow();
*/
    public static native long internal_native_GetCurrentWindow();

    public static ImGuiWindow FindWindowByID(int id) {
        long pointer = internal_native_FindWindowByID(id);
        if (pointer == 0)
            return null;
        if (ImGuiWindow_TEMP_STATIC_GEN_1 == null)
            ImGuiWindow_TEMP_STATIC_GEN_1 = ImGuiWindow.createInstance();
        ImGuiWindow_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_STATIC_GEN_1;
    }

    /*[-JNI;-NATIVE]
return (jlong)ImGuiWrapper::ImGuiInternal::FindWindowByID((int)id);
*/
    public static native long internal_native_FindWindowByID(int id);

    public static ImGuiWindow FindWindowByName(String name) {
        long pointer = internal_native_FindWindowByName(name);
        if (pointer == 0)
            return null;
        if (ImGuiWindow_TEMP_STATIC_GEN_2 == null)
            ImGuiWindow_TEMP_STATIC_GEN_2 = ImGuiWindow.createInstance();
        ImGuiWindow_TEMP_STATIC_GEN_2.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_STATIC_GEN_2;
    }

    /*[-JNI;-NATIVE]
return (jlong)ImGuiWrapper::ImGuiInternal::FindWindowByName(name);
*/
    public static native long internal_native_FindWindowByName(String name);

    public static void FocusWindow(ImGuiWindow window, ImGuiFocusRequestFlags ImGuiFocusRequestFlags) {
        internal_native_FocusWindow(window.native_address, ImGuiFocusRequestFlags.getValue());
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::FocusWindow((ImGuiWindow* )window_addr, (::ImGuiFocusRequestFlags)ImGuiFocusRequestFlags);
*/
    public static native void internal_native_FocusWindow(long window_addr, long ImGuiFocusRequestFlags);

    public static void FocusWindow(ImGuiWindow window) {
        internal_native_FocusWindow(window.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::FocusWindow((ImGuiWindow* )window_addr);
*/
    public static native void internal_native_FocusWindow(long window_addr);

    public static void ItemSize(ImVec2 size, float text_baseline_y) {
        internal_native_ItemSize(size.native_address, text_baseline_y);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ItemSize(*((ImVec2* )size_addr), (float)text_baseline_y);
*/
    public static native void internal_native_ItemSize(long size_addr, float text_baseline_y);

    public static void ItemSize(ImVec2 size) {
        internal_native_ItemSize(size.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ItemSize(*((ImVec2* )size_addr));
*/
    public static native void internal_native_ItemSize(long size_addr);

    public static void ItemSize(ImRect bb, float text_baseline_y) {
        internal_native_ItemSize_2(bb.native_address, text_baseline_y);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ItemSize_2(*((ImRect* )bb_addr), (float)text_baseline_y);
*/
    public static native void internal_native_ItemSize_2(long bb_addr, float text_baseline_y);

    public static void ItemSize(ImRect bb) {
        internal_native_ItemSize_2(bb.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ItemSize_2(*((ImRect* )bb_addr));
*/
    public static native void internal_native_ItemSize_2(long bb_addr);

    public static boolean ItemAdd(ImRect bb, int id, ImRect nav_bb, ImGuiItemFlags ImGuiItemFlags) {
        return internal_native_ItemAdd(bb.native_address, id, nav_bb.native_address, ImGuiItemFlags.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ItemAdd(*((ImRect* )bb_addr), (int)id, (ImRect* )nav_bb_addr, (::ImGuiItemFlags)ImGuiItemFlags);
*/
    public static native boolean internal_native_ItemAdd(long bb_addr, int id, long nav_bb_addr, long ImGuiItemFlags);

    public static boolean ItemAdd(ImRect bb, int id, ImRect nav_bb) {
        return internal_native_ItemAdd(bb.native_address, id, nav_bb.native_address);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ItemAdd(*((ImRect* )bb_addr), (int)id, (ImRect* )nav_bb_addr);
*/
    public static native boolean internal_native_ItemAdd(long bb_addr, int id, long nav_bb_addr);

    public static boolean ItemAdd(ImRect bb, int id) {
        return internal_native_ItemAdd(bb.native_address, id);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ItemAdd(*((ImRect* )bb_addr), (int)id);
*/
    public static native boolean internal_native_ItemAdd(long bb_addr, int id);

    public static boolean ItemHoverable(ImRect bb, int id, ImGuiItemFlags ImGuiItemFlags) {
        return internal_native_ItemHoverable(bb.native_address, id, ImGuiItemFlags.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ItemHoverable(*((ImRect* )bb_addr), (int)id, (::ImGuiItemFlags)ImGuiItemFlags);
*/
    public static native boolean internal_native_ItemHoverable(long bb_addr, int id, long ImGuiItemFlags);

    public static boolean IsWindowContentHoverable(ImGuiWindow window, ImGuiHoveredFlags ImGuiHoveredFlags) {
        return internal_native_IsWindowContentHoverable(window.native_address, ImGuiHoveredFlags.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::IsWindowContentHoverable((ImGuiWindow* )window_addr, (::ImGuiHoveredFlags)ImGuiHoveredFlags);
*/
    public static native boolean internal_native_IsWindowContentHoverable(long window_addr, long ImGuiHoveredFlags);

    public static boolean IsWindowContentHoverable(ImGuiWindow window) {
        return internal_native_IsWindowContentHoverable(window.native_address);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::IsWindowContentHoverable((ImGuiWindow* )window_addr);
*/
    public static native boolean internal_native_IsWindowContentHoverable(long window_addr);

    public static boolean IsClippedEx(ImRect bb, int id) {
        return internal_native_IsClippedEx(bb.native_address, id);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::IsClippedEx(*((ImRect* )bb_addr), (int)id);
*/
    public static native boolean internal_native_IsClippedEx(long bb_addr, int id);

    public static void SetLastItemData(int item_id, ImGuiItemFlags ImGuiItemFlags, ImGuiItemStatusFlags ImGuiItemStatusFlags, ImRect item_rect) {
        internal_native_SetLastItemData(item_id, ImGuiItemFlags.getValue(), ImGuiItemStatusFlags.getValue(), item_rect.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::SetLastItemData((int)item_id, (::ImGuiItemFlags)ImGuiItemFlags, (::ImGuiItemStatusFlags)ImGuiItemStatusFlags, *((ImRect* )item_rect_addr));
*/
    public static native void internal_native_SetLastItemData(int item_id, long ImGuiItemFlags, long ImGuiItemStatusFlags, long item_rect_addr);

    public static ImVec2 CalcItemSize(ImVec2 size, float default_w, float default_h) {
        long pointer = internal_native_CalcItemSize(size.native_address, default_w, default_h);
        if (pointer == 0)
            return null;
        if (ImVec2_TEMP_STATIC_GEN_0 == null)
            ImVec2_TEMP_STATIC_GEN_0 = ImVec2.createInstance();
        ImVec2_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
static ImVec2 copy_addr;
copy_addr = ImGuiWrapper::ImGuiInternal::CalcItemSize(*((ImVec2* )size_addr), (float)default_w, (float)default_h);
return (jlong)&copy_addr;*/
    public static native long internal_native_CalcItemSize(long size_addr, float default_w, float default_h);

    public static float CalcWrapWidthForPos(ImVec2 pos, float wrap_pos_x) {
        return internal_native_CalcWrapWidthForPos(pos.native_address, wrap_pos_x);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::CalcWrapWidthForPos(*((ImVec2* )pos_addr), (float)wrap_pos_x);
*/
    public static native float internal_native_CalcWrapWidthForPos(long pos_addr, float wrap_pos_x);

    public static void PushMultiItemsWidths(int components, float width_full) {
        internal_native_PushMultiItemsWidths(components, width_full);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::PushMultiItemsWidths((int)components, (float)width_full);
*/
    public static native void internal_native_PushMultiItemsWidths(int components, float width_full);

    public static boolean IsItemToggledSelection() {
        return internal_native_IsItemToggledSelection();
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::IsItemToggledSelection();
*/
    public static native boolean internal_native_IsItemToggledSelection();

    public static void ShrinkWidths(ImGuiShrinkWidthItem items, int count, float width_excess) {
        internal_native_ShrinkWidths(items.native_address, count, width_excess);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ShrinkWidths((ImGuiShrinkWidthItem* )items_addr, (int)count, (float)width_excess);
*/
    public static native void internal_native_ShrinkWidths(long items_addr, int count, float width_excess);

    public static void DockBuilderDockWindow(String window_name, int node_id) {
        internal_native_DockBuilderDockWindow(window_name, node_id);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::DockBuilderDockWindow(window_name, (int)node_id);
*/
    public static native void internal_native_DockBuilderDockWindow(String window_name, int node_id);

    public static ImGuiDockNode DockBuilderGetNode(int node_id) {
        long pointer = internal_native_DockBuilderGetNode(node_id);
        if (pointer == 0)
            return null;
        if (ImGuiDockNode_TEMP_STATIC_GEN_0 == null)
            ImGuiDockNode_TEMP_STATIC_GEN_0 = ImGuiDockNode.createInstance();
        ImGuiDockNode_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return ImGuiDockNode_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)ImGuiWrapper::ImGuiInternal::DockBuilderGetNode((int)node_id);
*/
    public static native long internal_native_DockBuilderGetNode(int node_id);

    public static ImGuiDockNode DockBuilderGetCentralNode(int node_id) {
        long pointer = internal_native_DockBuilderGetCentralNode(node_id);
        if (pointer == 0)
            return null;
        if (ImGuiDockNode_TEMP_STATIC_GEN_1 == null)
            ImGuiDockNode_TEMP_STATIC_GEN_1 = ImGuiDockNode.createInstance();
        ImGuiDockNode_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return ImGuiDockNode_TEMP_STATIC_GEN_1;
    }

    /*[-JNI;-NATIVE]
return (jlong)ImGuiWrapper::ImGuiInternal::DockBuilderGetCentralNode((int)node_id);
*/
    public static native long internal_native_DockBuilderGetCentralNode(int node_id);

    public static int DockBuilderAddNode(int node_id, ImGuiDockNodeFlags ImGuiDockNodeFlags) {
        return internal_native_DockBuilderAddNode(node_id, ImGuiDockNodeFlags.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::DockBuilderAddNode((int)node_id, (::ImGuiDockNodeFlags)ImGuiDockNodeFlags);
*/
    public static native int internal_native_DockBuilderAddNode(int node_id, long ImGuiDockNodeFlags);

    public static int DockBuilderAddNode(int node_id) {
        return internal_native_DockBuilderAddNode(node_id);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::DockBuilderAddNode((int)node_id);
*/
    public static native int internal_native_DockBuilderAddNode(int node_id);

    public static int DockBuilderAddNode() {
        return internal_native_DockBuilderAddNode();
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::DockBuilderAddNode();
*/
    public static native int internal_native_DockBuilderAddNode();

    public static void DockBuilderRemoveNode(int node_id) {
        internal_native_DockBuilderRemoveNode(node_id);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::DockBuilderRemoveNode((int)node_id);
*/
    public static native void internal_native_DockBuilderRemoveNode(int node_id);

    public static void DockBuilderRemoveNodeDockedWindows(int node_id, boolean clear_settings_refs) {
        internal_native_DockBuilderRemoveNodeDockedWindows(node_id, clear_settings_refs);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::DockBuilderRemoveNodeDockedWindows((int)node_id, clear_settings_refs);
*/
    public static native void internal_native_DockBuilderRemoveNodeDockedWindows(int node_id, boolean clear_settings_refs);

    public static void DockBuilderRemoveNodeDockedWindows(int node_id) {
        internal_native_DockBuilderRemoveNodeDockedWindows(node_id);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::DockBuilderRemoveNodeDockedWindows((int)node_id);
*/
    public static native void internal_native_DockBuilderRemoveNodeDockedWindows(int node_id);

    public static void DockBuilderRemoveNodeChildNodes(int node_id) {
        internal_native_DockBuilderRemoveNodeChildNodes(node_id);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::DockBuilderRemoveNodeChildNodes((int)node_id);
*/
    public static native void internal_native_DockBuilderRemoveNodeChildNodes(int node_id);

    public static void DockBuilderSetNodePos(int node_id, ImVec2 pos) {
        internal_native_DockBuilderSetNodePos(node_id, pos.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::DockBuilderSetNodePos((int)node_id, *((ImVec2* )pos_addr));
*/
    public static native void internal_native_DockBuilderSetNodePos(int node_id, long pos_addr);

    public static void DockBuilderSetNodeSize(int node_id, ImVec2 size) {
        internal_native_DockBuilderSetNodeSize(node_id, size.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::DockBuilderSetNodeSize((int)node_id, *((ImVec2* )size_addr));
*/
    public static native void internal_native_DockBuilderSetNodeSize(int node_id, long size_addr);

    public static int DockBuilderSplitNode(int node_id, ImGuiDir split_dir, float size_ratio_for_node_at_dir, IDLIntArray out_id_at_dir, IDLIntArray out_id_at_opposite_dir) {
        return internal_native_DockBuilderSplitNode(node_id, split_dir.getValue(), size_ratio_for_node_at_dir, out_id_at_dir.native_void_address, out_id_at_opposite_dir.native_void_address);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::DockBuilderSplitNode((int)node_id, (::ImGuiDir)split_dir, (float)size_ratio_for_node_at_dir, (int*)out_id_at_dir_addr, (int*)out_id_at_opposite_dir_addr);
*/
    public static native int internal_native_DockBuilderSplitNode(int node_id, long split_dir, float size_ratio_for_node_at_dir, long out_id_at_dir_addr, long out_id_at_opposite_dir_addr);

    public static void DockBuilderCopyWindowSettings(String src_name, String dst_name) {
        internal_native_DockBuilderCopyWindowSettings(src_name, dst_name);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::DockBuilderCopyWindowSettings(src_name, dst_name);
*/
    public static native void internal_native_DockBuilderCopyWindowSettings(String src_name, String dst_name);

    public static void DockBuilderFinish(int node_id) {
        internal_native_DockBuilderFinish(node_id);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::DockBuilderFinish((int)node_id);
*/
    public static native void internal_native_DockBuilderFinish(int node_id);

    public static boolean BeginTableEx(String str_id, int id, int column, ImGuiTableFlags ImGuiTableFlags, ImVec2 outer_size, float inner_width) {
        return internal_native_BeginTableEx(str_id, id, column, ImGuiTableFlags.getValue(), outer_size.native_address, inner_width);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::BeginTableEx(str_id, (int)id, (int)column, (::ImGuiTableFlags)ImGuiTableFlags, *((ImVec2* )outer_size_addr), (float)inner_width);
*/
    public static native boolean internal_native_BeginTableEx(String str_id, int id, int column, long ImGuiTableFlags, long outer_size_addr, float inner_width);

    public static boolean BeginTableEx(String str_id, int id, int column, ImGuiTableFlags ImGuiTableFlags, ImVec2 outer_size) {
        return internal_native_BeginTableEx(str_id, id, column, ImGuiTableFlags.getValue(), outer_size.native_address);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::BeginTableEx(str_id, (int)id, (int)column, (::ImGuiTableFlags)ImGuiTableFlags, *((ImVec2* )outer_size_addr));
*/
    public static native boolean internal_native_BeginTableEx(String str_id, int id, int column, long ImGuiTableFlags, long outer_size_addr);

    public static boolean BeginTableEx(String str_id, int id, int column, ImGuiTableFlags ImGuiTableFlags) {
        return internal_native_BeginTableEx(str_id, id, column, ImGuiTableFlags.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::BeginTableEx(str_id, (int)id, (int)column, (::ImGuiTableFlags)ImGuiTableFlags);
*/
    public static native boolean internal_native_BeginTableEx(String str_id, int id, int column, long ImGuiTableFlags);

    public static boolean BeginTableEx(String str_id, int id, int column) {
        return internal_native_BeginTableEx(str_id, id, column);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::BeginTableEx(str_id, (int)id, (int)column);
*/
    public static native boolean internal_native_BeginTableEx(String str_id, int id, int column);

    public static ImGuiTabBar GetCurrentTabBar() {
        long pointer = internal_native_GetCurrentTabBar();
        if (pointer == 0)
            return null;
        if (ImGuiTabBar_TEMP_STATIC_GEN_0 == null)
            ImGuiTabBar_TEMP_STATIC_GEN_0 = ImGuiTabBar.createInstance();
        ImGuiTabBar_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return ImGuiTabBar_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)ImGuiWrapper::ImGuiInternal::GetCurrentTabBar();
*/
    public static native long internal_native_GetCurrentTabBar();

    public static ImGuiTabItem TabBarFindTabByID(ImGuiTabBar tab_bar, int tab_id) {
        long pointer = internal_native_TabBarFindTabByID(tab_bar.native_address, tab_id);
        if (pointer == 0)
            return null;
        if (ImGuiTabItem_TEMP_STATIC_GEN_0 == null)
            ImGuiTabItem_TEMP_STATIC_GEN_0 = ImGuiTabItem.createInstance();
        ImGuiTabItem_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return ImGuiTabItem_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)ImGuiWrapper::ImGuiInternal::TabBarFindTabByID((ImGuiTabBar* )tab_bar_addr, (int)tab_id);
*/
    public static native long internal_native_TabBarFindTabByID(long tab_bar_addr, int tab_id);

    public static ImGuiTabItem TabBarFindTabByOrder(ImGuiTabBar tab_bar, int order) {
        long pointer = internal_native_TabBarFindTabByOrder(tab_bar.native_address, order);
        if (pointer == 0)
            return null;
        if (ImGuiTabItem_TEMP_STATIC_GEN_1 == null)
            ImGuiTabItem_TEMP_STATIC_GEN_1 = ImGuiTabItem.createInstance();
        ImGuiTabItem_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return ImGuiTabItem_TEMP_STATIC_GEN_1;
    }

    /*[-JNI;-NATIVE]
return (jlong)ImGuiWrapper::ImGuiInternal::TabBarFindTabByOrder((ImGuiTabBar* )tab_bar_addr, (int)order);
*/
    public static native long internal_native_TabBarFindTabByOrder(long tab_bar_addr, int order);

    public static void TabBarCloseTab(ImGuiTabBar tab_bar, ImGuiTabItem tab) {
        internal_native_TabBarCloseTab(tab_bar.native_address, tab.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::TabBarCloseTab((ImGuiTabBar* )tab_bar_addr, (ImGuiTabItem* )tab_addr);
*/
    public static native void internal_native_TabBarCloseTab(long tab_bar_addr, long tab_addr);

    public static void TabBarQueueFocus(ImGuiTabBar tab_bar, ImGuiTabItem tab) {
        internal_native_TabBarQueueFocus(tab_bar.native_address, tab.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::TabBarQueueFocus((ImGuiTabBar* )tab_bar_addr, (ImGuiTabItem* )tab_addr);
*/
    public static native void internal_native_TabBarQueueFocus(long tab_bar_addr, long tab_addr);

    public static void TabBarQueueReorder(ImGuiTabBar tab_bar, ImGuiTabItem tab, int offset) {
        internal_native_TabBarQueueReorder(tab_bar.native_address, tab.native_address, offset);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::TabBarQueueReorder((ImGuiTabBar* )tab_bar_addr, (ImGuiTabItem* )tab_addr, (int)offset);
*/
    public static native void internal_native_TabBarQueueReorder(long tab_bar_addr, long tab_addr, int offset);

    public static int GetActiveID() {
        return internal_native_GetActiveID();
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::GetActiveID();
*/
    public static native int internal_native_GetActiveID();

    public static int GetFocusID() {
        return internal_native_GetFocusID();
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::GetFocusID();
*/
    public static native int internal_native_GetFocusID();

    public static void SetActiveID(int id, ImGuiWindow window) {
        internal_native_SetActiveID(id, window.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::SetActiveID((int)id, (ImGuiWindow* )window_addr);
*/
    public static native void internal_native_SetActiveID(int id, long window_addr);

    public static void SetFocusID(int id, ImGuiWindow window) {
        internal_native_SetFocusID(id, window.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::SetFocusID((int)id, (ImGuiWindow* )window_addr);
*/
    public static native void internal_native_SetFocusID(int id, long window_addr);

    public static void ClearActiveID() {
        internal_native_ClearActiveID();
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ClearActiveID();
*/
    public static native void internal_native_ClearActiveID();

    public static int GetHoveredID() {
        return internal_native_GetHoveredID();
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::GetHoveredID();
*/
    public static native int internal_native_GetHoveredID();

    public static void SetHoveredID(int id) {
        internal_native_SetHoveredID(id);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::SetHoveredID((int)id);
*/
    public static native void internal_native_SetHoveredID(int id);

    public static void KeepAliveID(int id) {
        internal_native_KeepAliveID(id);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::KeepAliveID((int)id);
*/
    public static native void internal_native_KeepAliveID(int id);

    public static boolean IsDragDropActive() {
        return internal_native_IsDragDropActive();
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::IsDragDropActive();
*/
    public static native boolean internal_native_IsDragDropActive();

    public static boolean BeginDragDropTargetCustom(ImRect bb, int id) {
        return internal_native_BeginDragDropTargetCustom(bb.native_address, id);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::BeginDragDropTargetCustom(*((ImRect* )bb_addr), (int)id);
*/
    public static native boolean internal_native_BeginDragDropTargetCustom(long bb_addr, int id);

    public static void ClearDragDrop() {
        internal_native_ClearDragDrop();
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ClearDragDrop();
*/
    public static native void internal_native_ClearDragDrop();

    public static boolean IsDragDropPayloadBeingAccepted() {
        return internal_native_IsDragDropPayloadBeingAccepted();
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::IsDragDropPayloadBeingAccepted();
*/
    public static native boolean internal_native_IsDragDropPayloadBeingAccepted();

    public static void RenderDragDropTargetRect(ImRect bb, ImRect item_clip_rect) {
        internal_native_RenderDragDropTargetRect(bb.native_address, item_clip_rect.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::RenderDragDropTargetRect(*((ImRect* )bb_addr), *((ImRect* )item_clip_rect_addr));
*/
    public static native void internal_native_RenderDragDropTargetRect(long bb_addr, long item_clip_rect_addr);

    public static void RenderArrow(ImDrawList draw_list, ImVec2 pos, int col, ImGuiDir dir, float scale) {
        internal_native_RenderArrow(draw_list.native_address, pos.native_address, col, dir.getValue(), scale);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::RenderArrow((ImDrawList* )draw_list_addr, *((ImVec2* )pos_addr), (int)col, (::ImGuiDir)dir, (float)scale);
*/
    public static native void internal_native_RenderArrow(long draw_list_addr, long pos_addr, int col, long dir, float scale);

    public static void RenderArrow(ImDrawList draw_list, ImVec2 pos, int col, ImGuiDir dir) {
        internal_native_RenderArrow(draw_list.native_address, pos.native_address, col, dir.getValue());
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::RenderArrow((ImDrawList* )draw_list_addr, *((ImVec2* )pos_addr), (int)col, (::ImGuiDir)dir);
*/
    public static native void internal_native_RenderArrow(long draw_list_addr, long pos_addr, int col, long dir);

    public static void RenderBullet(ImDrawList draw_list, ImVec2 pos, int col) {
        internal_native_RenderBullet(draw_list.native_address, pos.native_address, col);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::RenderBullet((ImDrawList* )draw_list_addr, *((ImVec2* )pos_addr), (int)col);
*/
    public static native void internal_native_RenderBullet(long draw_list_addr, long pos_addr, int col);

    public static void RenderCheckMark(ImDrawList draw_list, ImVec2 pos, int col, float sz) {
        internal_native_RenderCheckMark(draw_list.native_address, pos.native_address, col, sz);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::RenderCheckMark((ImDrawList* )draw_list_addr, *((ImVec2* )pos_addr), (int)col, (float)sz);
*/
    public static native void internal_native_RenderCheckMark(long draw_list_addr, long pos_addr, int col, float sz);

    public static void RenderArrowPointingAt(ImDrawList draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir direction, int col) {
        internal_native_RenderArrowPointingAt(draw_list.native_address, pos.native_address, half_sz.native_address, direction.getValue(), col);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::RenderArrowPointingAt((ImDrawList* )draw_list_addr, *((ImVec2* )pos_addr), *((ImVec2* )half_sz_addr), (::ImGuiDir)direction, (int)col);
*/
    public static native void internal_native_RenderArrowPointingAt(long draw_list_addr, long pos_addr, long half_sz_addr, long direction, int col);

    public static void RenderArrowDockMenu(ImDrawList draw_list, ImVec2 p_min, float sz, int col) {
        internal_native_RenderArrowDockMenu(draw_list.native_address, p_min.native_address, sz, col);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::RenderArrowDockMenu((ImDrawList* )draw_list_addr, *((ImVec2* )p_min_addr), (float)sz, (int)col);
*/
    public static native void internal_native_RenderArrowDockMenu(long draw_list_addr, long p_min_addr, float sz, int col);

    public static void RenderRectFilledRangeH(ImDrawList draw_list, ImRect rect, int col, float x_start_norm, float x_end_norm, float rounding) {
        internal_native_RenderRectFilledRangeH(draw_list.native_address, rect.native_address, col, x_start_norm, x_end_norm, rounding);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::RenderRectFilledRangeH((ImDrawList* )draw_list_addr, *((ImRect* )rect_addr), (int)col, (float)x_start_norm, (float)x_end_norm, (float)rounding);
*/
    public static native void internal_native_RenderRectFilledRangeH(long draw_list_addr, long rect_addr, int col, float x_start_norm, float x_end_norm, float rounding);

    public static void RenderRectFilledWithHole(ImDrawList draw_list, ImRect outer, ImRect inner, int col, float rounding) {
        internal_native_RenderRectFilledWithHole(draw_list.native_address, outer.native_address, inner.native_address, col, rounding);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::RenderRectFilledWithHole((ImDrawList* )draw_list_addr, *((ImRect* )outer_addr), *((ImRect* )inner_addr), (int)col, (float)rounding);
*/
    public static native void internal_native_RenderRectFilledWithHole(long draw_list_addr, long outer_addr, long inner_addr, int col, float rounding);

    public static ImDrawFlags CalcRoundingFlagsForRectInRect(ImRect r_in, ImRect r_outer, float threshold) {
        int value = internal_native_CalcRoundingFlagsForRectInRect(r_in.native_address, r_outer.native_address, threshold);
        return ImDrawFlags.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
return (int)ImGuiWrapper::ImGuiInternal::CalcRoundingFlagsForRectInRect(*((ImRect* )r_in_addr), *((ImRect* )r_outer_addr), (float)threshold);
*/
    public static native int internal_native_CalcRoundingFlagsForRectInRect(long r_in_addr, long r_outer_addr, float threshold);

    public static boolean ArrowButtonEx(String str_id, ImGuiDir dir, ImVec2 size_arg, ImGuiButtonFlags ImGuiButtonFlags) {
        return internal_native_ArrowButtonEx(str_id, dir.getValue(), size_arg.native_address, ImGuiButtonFlags.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ArrowButtonEx(str_id, (::ImGuiDir)dir, *((ImVec2* )size_arg_addr), (::ImGuiButtonFlags)ImGuiButtonFlags);
*/
    public static native boolean internal_native_ArrowButtonEx(String str_id, long dir, long size_arg_addr, long ImGuiButtonFlags);

    public static boolean ArrowButtonEx(String str_id, ImGuiDir dir, ImVec2 size_arg) {
        return internal_native_ArrowButtonEx(str_id, dir.getValue(), size_arg.native_address);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ArrowButtonEx(str_id, (::ImGuiDir)dir, *((ImVec2* )size_arg_addr));
*/
    public static native boolean internal_native_ArrowButtonEx(String str_id, long dir, long size_arg_addr);

    public static boolean ButtonBehavior(ImRect bb, int id, IDLBoolArray out_hovered, IDLBoolArray out_held, ImGuiButtonFlags ImGuiButtonFlags) {
        return internal_native_ButtonBehavior(bb.native_address, id, out_hovered.native_void_address, out_held.native_void_address, ImGuiButtonFlags.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ButtonBehavior(*((ImRect* )bb_addr), (int)id, (bool*)out_hovered_addr, (bool*)out_held_addr, (::ImGuiButtonFlags)ImGuiButtonFlags);
*/
    public static native boolean internal_native_ButtonBehavior(long bb_addr, int id, long out_hovered_addr, long out_held_addr, long ImGuiButtonFlags);

    public static boolean ButtonBehavior(ImRect bb, int id, IDLBoolArray out_hovered, IDLBoolArray out_held) {
        return internal_native_ButtonBehavior(bb.native_address, id, out_hovered.native_void_address, out_held.native_void_address);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::ButtonBehavior(*((ImRect* )bb_addr), (int)id, (bool*)out_hovered_addr, (bool*)out_held_addr);
*/
    public static native boolean internal_native_ButtonBehavior(long bb_addr, int id, long out_hovered_addr, long out_held_addr);

    public static boolean DragBehavior(int id, ImGuiDataType ImGuiDataType, IDLFloatArray p_v, float v_speed, IDLBase p_min, IDLBase p_max, String format, ImGuiSliderFlags ImGuiSliderFlags) {
        return internal_native_DragBehavior(id, ImGuiDataType.getValue(), p_v.native_void_address, v_speed, p_min.native_void_address, p_max.native_void_address, format, ImGuiSliderFlags.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::DragBehavior((int)id, (::ImGuiDataType)ImGuiDataType, (float*)p_v_addr, (float)v_speed, (void** )p_min_addr, (void** )p_max_addr, format, (::ImGuiSliderFlags)ImGuiSliderFlags);
*/
    public static native boolean internal_native_DragBehavior(int id, long ImGuiDataType, long p_v_addr, float v_speed, long p_min_addr, long p_max_addr, String format, long ImGuiSliderFlags);

    public static boolean SliderBehavior(ImRect bb, int id, ImGuiDataType ImGuiDataType, IDLBase p_v, IDLBase p_min, IDLBase p_max, String format, ImGuiSliderFlags ImGuiSliderFlags, ImRect out_grab_bb) {
        return internal_native_SliderBehavior(bb.native_address, id, ImGuiDataType.getValue(), p_v.native_void_address, p_min.native_void_address, p_max.native_void_address, format, ImGuiSliderFlags.getValue(), out_grab_bb.native_address);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::SliderBehavior(*((ImRect* )bb_addr), (int)id, (::ImGuiDataType)ImGuiDataType, (void** )p_v_addr, (void** )p_min_addr, (void** )p_max_addr, format, (::ImGuiSliderFlags)ImGuiSliderFlags, (ImRect* )out_grab_bb_addr);
*/
    public static native boolean internal_native_SliderBehavior(long bb_addr, int id, long ImGuiDataType, long p_v_addr, long p_min_addr, long p_max_addr, String format, long ImGuiSliderFlags, long out_grab_bb_addr);

    public static boolean SplitterBehavior(ImRect bb, int id, ImGuiAxis axis, IDLFloatArray size1, IDLFloatArray size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay, int bg_col) {
        return internal_native_SplitterBehavior(bb.native_address, id, axis.getValue(), size1.native_void_address, size2.native_void_address, min_size1, min_size2, hover_extend, hover_visibility_delay, bg_col);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::SplitterBehavior(*((ImRect* )bb_addr), (int)id, (::ImGuiAxis)axis, (float*)size1_addr, (float*)size2_addr, (float)min_size1, (float)min_size2, (float)hover_extend, (float)hover_visibility_delay, (int)bg_col);
*/
    public static native boolean internal_native_SplitterBehavior(long bb_addr, int id, long axis, long size1_addr, long size2_addr, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay, int bg_col);

    public static boolean SplitterBehavior(ImRect bb, int id, ImGuiAxis axis, IDLFloatArray size1, IDLFloatArray size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay) {
        return internal_native_SplitterBehavior(bb.native_address, id, axis.getValue(), size1.native_void_address, size2.native_void_address, min_size1, min_size2, hover_extend, hover_visibility_delay);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::SplitterBehavior(*((ImRect* )bb_addr), (int)id, (::ImGuiAxis)axis, (float*)size1_addr, (float*)size2_addr, (float)min_size1, (float)min_size2, (float)hover_extend, (float)hover_visibility_delay);
*/
    public static native boolean internal_native_SplitterBehavior(long bb_addr, int id, long axis, long size1_addr, long size2_addr, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay);

    public static boolean SplitterBehavior(ImRect bb, int id, ImGuiAxis axis, IDLFloatArray size1, IDLFloatArray size2, float min_size1, float min_size2, float hover_extend) {
        return internal_native_SplitterBehavior(bb.native_address, id, axis.getValue(), size1.native_void_address, size2.native_void_address, min_size1, min_size2, hover_extend);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::SplitterBehavior(*((ImRect* )bb_addr), (int)id, (::ImGuiAxis)axis, (float*)size1_addr, (float*)size2_addr, (float)min_size1, (float)min_size2, (float)hover_extend);
*/
    public static native boolean internal_native_SplitterBehavior(long bb_addr, int id, long axis, long size1_addr, long size2_addr, float min_size1, float min_size2, float hover_extend);

    public static boolean SplitterBehavior(ImRect bb, int id, ImGuiAxis axis, IDLFloatArray size1, IDLFloatArray size2, float min_size1, float min_size2) {
        return internal_native_SplitterBehavior(bb.native_address, id, axis.getValue(), size1.native_void_address, size2.native_void_address, min_size1, min_size2);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::SplitterBehavior(*((ImRect* )bb_addr), (int)id, (::ImGuiAxis)axis, (float*)size1_addr, (float*)size2_addr, (float)min_size1, (float)min_size2);
*/
    public static native boolean internal_native_SplitterBehavior(long bb_addr, int id, long axis, long size1_addr, long size2_addr, float min_size1, float min_size2);

    public static boolean TreeNodeBehavior(int id, ImGuiTreeNodeFlags ImGuiTreeNodeFlags, String label, String label_end) {
        return internal_native_TreeNodeBehavior(id, ImGuiTreeNodeFlags.getValue(), label, label_end);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::TreeNodeBehavior((int)id, (::ImGuiTreeNodeFlags)ImGuiTreeNodeFlags, label, label_end);
*/
    public static native boolean internal_native_TreeNodeBehavior(int id, long ImGuiTreeNodeFlags, String label, String label_end);

    public static boolean TreeNodeBehavior(int id, ImGuiTreeNodeFlags ImGuiTreeNodeFlags, String label) {
        return internal_native_TreeNodeBehavior(id, ImGuiTreeNodeFlags.getValue(), label);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::TreeNodeBehavior((int)id, (::ImGuiTreeNodeFlags)ImGuiTreeNodeFlags, label);
*/
    public static native boolean internal_native_TreeNodeBehavior(int id, long ImGuiTreeNodeFlags, String label);

    public static void TreePushOverrideID(int id) {
        internal_native_TreePushOverrideID(id);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::TreePushOverrideID((int)id);
*/
    public static native void internal_native_TreePushOverrideID(int id);

    public static void TreeNodeSetOpen(int id, boolean open) {
        internal_native_TreeNodeSetOpen(id, open);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::TreeNodeSetOpen((int)id, open);
*/
    public static native void internal_native_TreeNodeSetOpen(int id, boolean open);

    public static boolean TreeNodeUpdateNextOpen(int id, ImGuiTreeNodeFlags ImGuiTreeNodeFlags) {
        return internal_native_TreeNodeUpdateNextOpen(id, ImGuiTreeNodeFlags.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::TreeNodeUpdateNextOpen((int)id, (::ImGuiTreeNodeFlags)ImGuiTreeNodeFlags);
*/
    public static native boolean internal_native_TreeNodeUpdateNextOpen(int id, long ImGuiTreeNodeFlags);

    public static void SetNextItemSelectionUserData(int selection_user_data) {
        internal_native_SetNextItemSelectionUserData(selection_user_data);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::SetNextItemSelectionUserData((int)selection_user_data);
*/
    public static native void internal_native_SetNextItemSelectionUserData(int selection_user_data);

    public static int GetKeyOwner(ImGuiKey ImGuiKey) {
        return internal_native_GetKeyOwner(ImGuiKey.getValue());
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::GetKeyOwner((::ImGuiKey)ImGuiKey);
*/
    public static native int internal_native_GetKeyOwner(long ImGuiKey);

    public static void SetKeyOwner(ImGuiKey ImGuiKey, int owner_id, ImGuiInputFlags ImGuiInputFlags) {
        internal_native_SetKeyOwner(ImGuiKey.getValue(), owner_id, ImGuiInputFlags.getValue());
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::SetKeyOwner((::ImGuiKey)ImGuiKey, (int)owner_id, (::ImGuiInputFlags)ImGuiInputFlags);
*/
    public static native void internal_native_SetKeyOwner(long ImGuiKey, int owner_id, long ImGuiInputFlags);

    public static void SetKeyOwner(ImGuiKey ImGuiKey, int owner_id) {
        internal_native_SetKeyOwner(ImGuiKey.getValue(), owner_id);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::SetKeyOwner((::ImGuiKey)ImGuiKey, (int)owner_id);
*/
    public static native void internal_native_SetKeyOwner(long ImGuiKey, int owner_id);

    public static void SetItemKeyOwner(ImGuiKey ImGuiKey, ImGuiInputFlags ImGuiInputFlags) {
        internal_native_SetItemKeyOwner(ImGuiKey.getValue(), ImGuiInputFlags.getValue());
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::SetItemKeyOwner((::ImGuiKey)ImGuiKey, (::ImGuiInputFlags)ImGuiInputFlags);
*/
    public static native void internal_native_SetItemKeyOwner(long ImGuiKey, long ImGuiInputFlags);

    public static void SetItemKeyOwner(ImGuiKey ImGuiKey) {
        internal_native_SetItemKeyOwner(ImGuiKey.getValue());
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::SetItemKeyOwner((::ImGuiKey)ImGuiKey);
*/
    public static native void internal_native_SetItemKeyOwner(long ImGuiKey);

    public static boolean TestKeyOwner(ImGuiKey ImGuiKey, int owner_id) {
        return internal_native_TestKeyOwner(ImGuiKey.getValue(), owner_id);
    }

    /*[-JNI;-NATIVE]
return ImGuiWrapper::ImGuiInternal::TestKeyOwner((::ImGuiKey)ImGuiKey, (int)owner_id);
*/
    public static native boolean internal_native_TestKeyOwner(long ImGuiKey, int owner_id);

    public static void ScrollToItem(ImGuiScrollFlags flags) {
        internal_native_ScrollToItem(flags.getValue());
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ScrollToItem((::ImGuiScrollFlags)flags);
*/
    public static native void internal_native_ScrollToItem(long flags);

    public static void ScrollToItem() {
        internal_native_ScrollToItem();
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ScrollToItem();
*/
    public static native void internal_native_ScrollToItem();

    public static void ScrollToRect(ImGuiWindow window, ImRect rect, ImGuiScrollFlags flags) {
        internal_native_ScrollToRect(window.native_address, rect.native_address, flags.getValue());
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ScrollToRect((ImGuiWindow* )window_addr, *((ImRect* )rect_addr), (::ImGuiScrollFlags)flags);
*/
    public static native void internal_native_ScrollToRect(long window_addr, long rect_addr, long flags);

    public static void ScrollToRect(ImGuiWindow window, ImRect rect) {
        internal_native_ScrollToRect(window.native_address, rect.native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiWrapper::ImGuiInternal::ScrollToRect((ImGuiWindow* )window_addr, *((ImRect* )rect_addr));
*/
    public static native void internal_native_ScrollToRect(long window_addr, long rect_addr);

    public static ImVec2 ScrollToRectEx(ImGuiWindow window, ImRect rect, ImGuiScrollFlags flags) {
        long pointer = internal_native_ScrollToRectEx(window.native_address, rect.native_address, flags.getValue());
        if (pointer == 0)
            return null;
        if (ImVec2_TEMP_STATIC_GEN_1 == null)
            ImVec2_TEMP_STATIC_GEN_1 = ImVec2.createInstance();
        ImVec2_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_1;
    }

    /*[-JNI;-NATIVE]
static ImVec2 copy_addr;
copy_addr = ImGuiWrapper::ImGuiInternal::ScrollToRectEx((ImGuiWindow* )window_addr, *((ImRect* )rect_addr), (::ImGuiScrollFlags)flags);
return (jlong)&copy_addr;*/
    public static native long internal_native_ScrollToRectEx(long window_addr, long rect_addr, long flags);

    public static ImVec2 ScrollToRectEx(ImGuiWindow window, ImRect rect) {
        long pointer = internal_native_ScrollToRectEx(window.native_address, rect.native_address);
        if (pointer == 0)
            return null;
        if (ImVec2_TEMP_STATIC_GEN_2 == null)
            ImVec2_TEMP_STATIC_GEN_2 = ImVec2.createInstance();
        ImVec2_TEMP_STATIC_GEN_2.internal_reset(pointer, false);
        return ImVec2_TEMP_STATIC_GEN_2;
    }

    /*[-JNI;-NATIVE]
static ImVec2 copy_addr;
copy_addr = ImGuiWrapper::ImGuiInternal::ScrollToRectEx((ImGuiWindow* )window_addr, *((ImRect* )rect_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_ScrollToRectEx(long window_addr, long rect_addr);
}
