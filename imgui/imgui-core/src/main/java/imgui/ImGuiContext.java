/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package imgui;

import imgui.idl.IDLBase;

public class ImGuiContext extends IDLBase {

    private ImGuiStorage ImGuiStorage_TEMP_GEN_0;

    private ImVec2 ImVec2_TEMP_GEN_0;

    private ImGuiWindow ImGuiWindow_TEMP_GEN_0;

    private ImGuiWindow ImGuiWindow_TEMP_GEN_1;

    private ImGuiWindow ImGuiWindow_TEMP_GEN_2;

    private ImGuiWindow ImGuiWindow_TEMP_GEN_3;

    private ImGuiWindow ImGuiWindow_TEMP_GEN_4;

    private ImVec2 ImVec2_TEMP_GEN_1;

    private ImGuiWindow ImGuiWindow_TEMP_GEN_5;

    private ImGuiWindow ImGuiWindow_TEMP_GEN_6;

    private ImGuiLastItemData ImGuiLastItemData_TEMP_GEN_0;

    static public final ImGuiContext NULL = ImGuiContext.native_new();

    static public final ImGuiContext T_01 = ImGuiContext.native_new();

    static public final ImGuiContext T_02 = ImGuiContext.native_new();

    static public final ImGuiContext T_03 = ImGuiContext.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected ImGuiContext(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static ImGuiContext native_new() {
        return new ImGuiContext((byte) 0, (char) 0);
    }

    public double get_Time() {
        return internal_native_get_Time(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->Time;
*/
    public static native double internal_native_get_Time(long this_addr);

    public int get_NavId() {
        return internal_native_get_NavId(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->NavId;
*/
    public static native int internal_native_get_NavId(long this_addr);

    public ImGuiStorage get_WindowsById() {
        long pointer = internal_native_get_WindowsById(native_address);
        if (pointer == 0)
            return ImGuiStorage.NULL;
        if (ImGuiStorage_TEMP_GEN_0 == null)
            ImGuiStorage_TEMP_GEN_0 = ImGuiStorage.native_new();
        ImGuiStorage_TEMP_GEN_0.internal_reset(pointer, false);
        return ImGuiStorage_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return (jlong)&nativeObject->WindowsById;
*/
    public static native long internal_native_get_WindowsById(long this_addr);

    public int get_WindowsActiveCount() {
        return internal_native_get_WindowsActiveCount(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->WindowsActiveCount;
*/
    public static native int internal_native_get_WindowsActiveCount(long this_addr);

    public ImVec2 get_WindowsHoverPadding() {
        long pointer = internal_native_get_WindowsHoverPadding(native_address);
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_GEN_0 == null)
            ImVec2_TEMP_GEN_0 = ImVec2.native_new();
        ImVec2_TEMP_GEN_0.internal_reset(pointer, false);
        return ImVec2_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return (jlong)&nativeObject->WindowsHoverPadding;
*/
    public static native long internal_native_get_WindowsHoverPadding(long this_addr);

    public int get_DebugBreakInWindow() {
        return internal_native_get_DebugBreakInWindow(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->DebugBreakInWindow;
*/
    public static native int internal_native_get_DebugBreakInWindow(long this_addr);

    public ImGuiWindow get_CurrentWindow() {
        long pointer = internal_native_get_CurrentWindow(native_address);
        if (pointer == 0)
            return ImGuiWindow.NULL;
        if (ImGuiWindow_TEMP_GEN_0 == null)
            ImGuiWindow_TEMP_GEN_0 = ImGuiWindow.native_new();
        ImGuiWindow_TEMP_GEN_0.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
ImGuiWindow* attr = nativeObject->CurrentWindow;
return (jlong)attr;
*/
    public static native long internal_native_get_CurrentWindow(long this_addr);

    public ImGuiWindow get_HoveredWindow() {
        long pointer = internal_native_get_HoveredWindow(native_address);
        if (pointer == 0)
            return ImGuiWindow.NULL;
        if (ImGuiWindow_TEMP_GEN_1 == null)
            ImGuiWindow_TEMP_GEN_1 = ImGuiWindow.native_new();
        ImGuiWindow_TEMP_GEN_1.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
ImGuiWindow* attr = nativeObject->HoveredWindow;
return (jlong)attr;
*/
    public static native long internal_native_get_HoveredWindow(long this_addr);

    public ImGuiWindow get_HoveredWindowUnderMovingWindow() {
        long pointer = internal_native_get_HoveredWindowUnderMovingWindow(native_address);
        if (pointer == 0)
            return ImGuiWindow.NULL;
        if (ImGuiWindow_TEMP_GEN_2 == null)
            ImGuiWindow_TEMP_GEN_2 = ImGuiWindow.native_new();
        ImGuiWindow_TEMP_GEN_2.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
ImGuiWindow* attr = nativeObject->HoveredWindowUnderMovingWindow;
return (jlong)attr;
*/
    public static native long internal_native_get_HoveredWindowUnderMovingWindow(long this_addr);

    public ImGuiWindow get_MovingWindow() {
        long pointer = internal_native_get_MovingWindow(native_address);
        if (pointer == 0)
            return ImGuiWindow.NULL;
        if (ImGuiWindow_TEMP_GEN_3 == null)
            ImGuiWindow_TEMP_GEN_3 = ImGuiWindow.native_new();
        ImGuiWindow_TEMP_GEN_3.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
ImGuiWindow* attr = nativeObject->MovingWindow;
return (jlong)attr;
*/
    public static native long internal_native_get_MovingWindow(long this_addr);

    public ImGuiWindow get_WheelingWindow() {
        long pointer = internal_native_get_WheelingWindow(native_address);
        if (pointer == 0)
            return ImGuiWindow.NULL;
        if (ImGuiWindow_TEMP_GEN_4 == null)
            ImGuiWindow_TEMP_GEN_4 = ImGuiWindow.native_new();
        ImGuiWindow_TEMP_GEN_4.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
ImGuiWindow* attr = nativeObject->WheelingWindow;
return (jlong)attr;
*/
    public static native long internal_native_get_WheelingWindow(long this_addr);

    public int get_DebugHookIdInfo() {
        return internal_native_get_DebugHookIdInfo(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->DebugHookIdInfo;
*/
    public static native int internal_native_get_DebugHookIdInfo(long this_addr);

    public int get_HoveredId() {
        return internal_native_get_HoveredId(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->HoveredId;
*/
    public static native int internal_native_get_HoveredId(long this_addr);

    public int get_HoveredIdPreviousFrame() {
        return internal_native_get_HoveredIdPreviousFrame(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->HoveredIdPreviousFrame;
*/
    public static native int internal_native_get_HoveredIdPreviousFrame(long this_addr);

    public boolean get_HoveredIdAllowOverlap() {
        return internal_native_get_HoveredIdAllowOverlap(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->HoveredIdAllowOverlap;
*/
    public static native boolean internal_native_get_HoveredIdAllowOverlap(long this_addr);

    public float get_HoveredIdTimer() {
        return internal_native_get_HoveredIdTimer(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->HoveredIdTimer;
*/
    public static native float internal_native_get_HoveredIdTimer(long this_addr);

    public float get_HoveredIdNotActiveTimer() {
        return internal_native_get_HoveredIdNotActiveTimer(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->HoveredIdNotActiveTimer;
*/
    public static native float internal_native_get_HoveredIdNotActiveTimer(long this_addr);

    public int get_ActiveId() {
        return internal_native_get_ActiveId(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveId;
*/
    public static native int internal_native_get_ActiveId(long this_addr);

    public int get_ActiveIdIsAlive() {
        return internal_native_get_ActiveIdIsAlive(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdIsAlive;
*/
    public static native int internal_native_get_ActiveIdIsAlive(long this_addr);

    public float get_ActiveIdTimer() {
        return internal_native_get_ActiveIdTimer(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdTimer;
*/
    public static native float internal_native_get_ActiveIdTimer(long this_addr);

    public boolean get_ActiveIdIsJustActivated() {
        return internal_native_get_ActiveIdIsJustActivated(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdIsJustActivated;
*/
    public static native boolean internal_native_get_ActiveIdIsJustActivated(long this_addr);

    public boolean get_ActiveIdAllowOverlap() {
        return internal_native_get_ActiveIdAllowOverlap(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdAllowOverlap;
*/
    public static native boolean internal_native_get_ActiveIdAllowOverlap(long this_addr);

    public boolean get_ActiveIdNoClearOnFocusLoss() {
        return internal_native_get_ActiveIdNoClearOnFocusLoss(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdNoClearOnFocusLoss;
*/
    public static native boolean internal_native_get_ActiveIdNoClearOnFocusLoss(long this_addr);

    public boolean get_ActiveIdHasBeenPressedBefore() {
        return internal_native_get_ActiveIdHasBeenPressedBefore(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdHasBeenPressedBefore;
*/
    public static native boolean internal_native_get_ActiveIdHasBeenPressedBefore(long this_addr);

    public boolean get_ActiveIdHasBeenEditedBefore() {
        return internal_native_get_ActiveIdHasBeenEditedBefore(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdHasBeenEditedBefore;
*/
    public static native boolean internal_native_get_ActiveIdHasBeenEditedBefore(long this_addr);

    public boolean get_ActiveIdHasBeenEditedThisFrame() {
        return internal_native_get_ActiveIdHasBeenEditedThisFrame(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdHasBeenEditedThisFrame;
*/
    public static native boolean internal_native_get_ActiveIdHasBeenEditedThisFrame(long this_addr);

    public boolean get_ActiveIdFromShortcut() {
        return internal_native_get_ActiveIdFromShortcut(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdFromShortcut;
*/
    public static native boolean internal_native_get_ActiveIdFromShortcut(long this_addr);

    public int get_ActiveIdMouseButton() {
        return internal_native_get_ActiveIdMouseButton(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdMouseButton;
*/
    public static native int internal_native_get_ActiveIdMouseButton(long this_addr);

    public ImVec2 get_ActiveIdClickOffset() {
        long pointer = internal_native_get_ActiveIdClickOffset(native_address);
        if (pointer == 0)
            return ImVec2.NULL;
        if (ImVec2_TEMP_GEN_1 == null)
            ImVec2_TEMP_GEN_1 = ImVec2.native_new();
        ImVec2_TEMP_GEN_1.internal_reset(pointer, false);
        return ImVec2_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return (jlong)&nativeObject->ActiveIdClickOffset;
*/
    public static native long internal_native_get_ActiveIdClickOffset(long this_addr);

    public ImGuiWindow get_ActiveIdWindow() {
        long pointer = internal_native_get_ActiveIdWindow(native_address);
        if (pointer == 0)
            return ImGuiWindow.NULL;
        if (ImGuiWindow_TEMP_GEN_5 == null)
            ImGuiWindow_TEMP_GEN_5 = ImGuiWindow.native_new();
        ImGuiWindow_TEMP_GEN_5.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
ImGuiWindow* attr = nativeObject->ActiveIdWindow;
return (jlong)attr;
*/
    public static native long internal_native_get_ActiveIdWindow(long this_addr);

    public int get_ActiveIdPreviousFrame() {
        return internal_native_get_ActiveIdPreviousFrame(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdPreviousFrame;
*/
    public static native int internal_native_get_ActiveIdPreviousFrame(long this_addr);

    public boolean get_ActiveIdPreviousFrameIsAlive() {
        return internal_native_get_ActiveIdPreviousFrameIsAlive(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdPreviousFrameIsAlive;
*/
    public static native boolean internal_native_get_ActiveIdPreviousFrameIsAlive(long this_addr);

    public boolean get_ActiveIdPreviousFrameHasBeenEditedBefore() {
        return internal_native_get_ActiveIdPreviousFrameHasBeenEditedBefore(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->ActiveIdPreviousFrameHasBeenEditedBefore;
*/
    public static native boolean internal_native_get_ActiveIdPreviousFrameHasBeenEditedBefore(long this_addr);

    public ImGuiWindow get_ActiveIdPreviousFrameWindow() {
        long pointer = internal_native_get_ActiveIdPreviousFrameWindow(native_address);
        if (pointer == 0)
            return ImGuiWindow.NULL;
        if (ImGuiWindow_TEMP_GEN_6 == null)
            ImGuiWindow_TEMP_GEN_6 = ImGuiWindow.native_new();
        ImGuiWindow_TEMP_GEN_6.internal_reset(pointer, false);
        return ImGuiWindow_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
ImGuiWindow* attr = nativeObject->ActiveIdPreviousFrameWindow;
return (jlong)attr;
*/
    public static native long internal_native_get_ActiveIdPreviousFrameWindow(long this_addr);

    public int get_LastActiveId() {
        return internal_native_get_LastActiveId(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->LastActiveId;
*/
    public static native int internal_native_get_LastActiveId(long this_addr);

    public float get_LastActiveIdTimer() {
        return internal_native_get_LastActiveIdTimer(native_address);
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return nativeObject->LastActiveIdTimer;
*/
    public static native float internal_native_get_LastActiveIdTimer(long this_addr);

    public ImGuiLastItemData get_LastItemData() {
        long pointer = internal_native_get_LastItemData(native_address);
        if (pointer == 0)
            return ImGuiLastItemData.NULL;
        if (ImGuiLastItemData_TEMP_GEN_0 == null)
            ImGuiLastItemData_TEMP_GEN_0 = ImGuiLastItemData.native_new();
        ImGuiLastItemData_TEMP_GEN_0.internal_reset(pointer, false);
        return ImGuiLastItemData_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ImGuiContext* nativeObject = (ImGuiContext*)this_addr;
return (jlong)&nativeObject->LastItemData;
*/
    public static native long internal_native_get_LastItemData(long this_addr);
}
