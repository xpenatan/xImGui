/*
  -------------------------------------------------------
   This file was generated by JParser
 
   Do not make changes to this file
  -------------------------------------------------------
*/
package imgui;

import imgui.idl.helper.IDLByteArray;
import imgui.idl.helper.IDLIntArray;
import imgui.idl.IDLBase;

public class ImGuiIO extends IDLBase {

    private ImVec2 ImVec2_TEMP_GEN_0;

    private ImVec2 ImVec2_TEMP_GEN_1;

    private ImFontAtlas ImFontAtlas_TEMP_GEN_0;

    public final static ImGuiIO NULL = createInstance();

    public static ImGuiIO TMP_EMPTY = new ImGuiIO(false);

    public static ImGuiIO createInstance() {
        return new ImGuiIO((byte) 0, (char) 0);
    }

    private ImGuiIO(byte v, char c) {
    }

    public ImGuiIO(boolean cMemoryOwn) {
    }

    // public boolean ContainsConfigFlags(ImGuiConfigFlags flags) {
    // return ContainsConfigFlagsNATIVE(getCPointer(), flags.getValue());
    // }
    // 
    // /*[-TEAVM;-NATIVE]
    // var io = [MODULE].wrapPointer(addr, [MODULE].ImGuiIO);
    // var newFlag = io.get_ConfigFlags() & flag;
    // return newFlag == flag;
    // */
    // /*[-JNI;-NATIVE]
    // ImGuiIO* io = (ImGuiIO*)addr;
    // int newFlag = io->ConfigFlags & flag;
    // return newFlag == flag;
    // */
    // private static native boolean ContainsConfigFlagsNATIVE(long addr, int flag);
    public void SetDockingFlags(boolean ConfigDockingNoSplit, boolean ConfigDockingWithShift, boolean ConfigDockingAlwaysTabBar, boolean ConfigDockingTransparentPayload) {
        SetDockingFlagsNATIVE(native_address, ConfigDockingNoSplit, ConfigDockingWithShift, ConfigDockingAlwaysTabBar, ConfigDockingTransparentPayload);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              io->ConfigDockingNoSplit = ConfigDockingNoSplit;
              io->ConfigDockingWithShift = ConfigDockingWithShift;
              io->ConfigDockingAlwaysTabBar = ConfigDockingAlwaysTabBar;
              io->ConfigDockingTransparentPayload = ConfigDockingTransparentPayload;
    */
    private static native void SetDockingFlagsNATIVE(long addr, boolean ConfigDockingNoSplit, boolean ConfigDockingWithShift, boolean ConfigDockingAlwaysTabBar, boolean ConfigDockingTransparentPayload);

    public void SetFontGlobalScale(float scale) {
        SetFontGlobalScaleNATIVE(native_address, scale);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              io->FontGlobalScale = scale;
    */
    private static native void SetFontGlobalScaleNATIVE(long addr, float scale);

    public boolean getWantCaptureMouse() {
        return getWantCaptureMouseNATIVE(native_address);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              return io->WantCaptureMouse;
    */
    private static native boolean getWantCaptureMouseNATIVE(long addr);

    // TODO fix replace. generator not yet cast int on multiple methods.
    // /*[-TEAVM;-REPLACE]
    // public void setIniFilename(String fileName) {
    // long cPointer1 = getCPointer();
    // if(fileName == null) {
    // removeIniFilenameNATIVE((int)cPointer1);
    // }else {
    // setIniFilenameNATIVE((int)cPointer1, fileName.getBytes());
    // }
    // }
    // */
    // public void setIniFilename(String fileName) {
    // long cPointer1 = getCPointer();
    // if(fileName == null) {
    // removeIniFilenameNATIVE(cPointer1);
    // }else {
    // setIniFilenameNATIVE(cPointer1, fileName.getBytes());
    // }
    // }
    // 
    // /*[-TEAVM;-NATIVE]
    // var io = [MODULE].wrapPointer(addr, [MODULE].ImGuiIO);
    // [MODULE].ImHelper.prototype.setIniFilename(io, fileName);
    // */
    // /*[-JNI;-NATIVE]
    // ImGuiIO* io = (ImGuiIO*)addr;
    // io->IniFilename = fileName.data;
    // */
    // private static native void setIniFilenameNATIVE(long addr, byte[] fileName);
    // 
    // /*[-TEAVM;-NATIVE]
    // var io = [MODULE].wrapPointer(addr, [MODULE].ImGuiIO);
    // [MODULE].ImHelper.prototype.removeIniFilename(io);
    // */
    // /*[-JNI;-NATIVE]
    // ImGuiIO* io = (ImGuiIO*)addr;
    // io->IniFilename = NULL;
    // */
    // private static native void removeIniFilenameNATIVE(long addr);
    public boolean containsIniFilename() {
        return containsIniFilenameNATIVE(native_address);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              return io->IniFilename != NULL;
    */
    private static native boolean containsIniFilenameNATIVE(long addr);

    public void SetFontTexID(long id) {
        SetFontTexIDNATIVE(native_address, id);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              io->Fonts->TexID = (ImTextureID)id;
    */
    private static native void SetFontTexIDNATIVE(long addr, long id);

    public void UpdateKeyTyped(int c) {
        updateKeyTyped(native_address, c);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              if (c > 0 && c < 0x10000)
                  io->AddInputCharacter((unsigned short)c);
    */
    private static native void updateKeyTyped(long addr, int c);

    public void AddMousePosEvent(float x, float y) {
        AddMousePosEventNATIVE(native_address, x, y);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              io->AddMousePosEvent(x, y);
    */
    private static native void AddMousePosEventNATIVE(long addr, float x, float y);

    public void AddMouseButtonEvent(int button, boolean down) {
        AddMouseButtonEventNATIVE(native_address, button, down);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              io->AddMouseButtonEvent(button, down);
    */
    private static native void AddMouseButtonEventNATIVE(long addr, int button, boolean down);

    public void AddMouseWheelEvent(float xOffset, float yOffset) {
        AddMouseWheelEventNATIVE(native_address, xOffset, yOffset);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              io->AddMouseWheelEvent(xOffset, yOffset);
    */
    private static native void AddMouseWheelEventNATIVE(long addr, float xOffset, float yOffset);

    public void SetClipboardTextFunction(ClipboardTextFunction function) {
        setClipboardTextFunctionNATIVE(native_address, function.native_address);
    }

    /*
      [-JNI;-NATIVE]
              ImGuiIO* io = (ImGuiIO*)addr;
              ClipboardTextFunction* clipboardFunction = (ClipboardTextFunction*)function_addr;
              ImHelper::setClipboardTextFunction(io, clipboardFunction);
    */
    private static native void setClipboardTextFunctionNATIVE(long addr, long function_addr);

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      delete nativeObject;
    */
    public static native void internal_native_deleteNative(long this_addr);

    public void AddKeyEvent(ImGuiKey ImGuiKey, boolean down) {
        internal_native_AddKeyEvent(native_address, ImGuiKey.getValue(), down);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->AddKeyEvent((::ImGuiKey)ImGuiKey, down);
    */
    public static native void internal_native_AddKeyEvent(long this_addr, long ImGuiKey, boolean down);

    public void AddInputCharacter(int c) {
        internal_native_AddInputCharacter(native_address, c);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->AddInputCharacter(c);
    */
    public static native void internal_native_AddInputCharacter(long this_addr, int c);

    public boolean get_WantCaptureMouse() {
        return internal_native_get_WantCaptureMouse(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return nativeObject->WantCaptureMouse;
    */
    public static native boolean internal_native_get_WantCaptureMouse(long this_addr);

    public void set_WantCaptureMouse(boolean WantCaptureMouse) {
        internal_native_set_WantCaptureMouse(native_address, WantCaptureMouse);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->WantCaptureMouse = WantCaptureMouse;
    */
    public static native void internal_native_set_WantCaptureMouse(long this_addr, boolean WantCaptureMouse);

    public ImVec2 get_DisplaySize() {
        long pointer = internal_native_get_DisplaySize(native_address);
        if (pointer == 0)
            return null;
        if (ImVec2_TEMP_GEN_0 == null)
            ImVec2_TEMP_GEN_0 = ImVec2.createInstance();
        ImVec2_TEMP_GEN_0.internal_reset(pointer, false);
        return ImVec2_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return (jlong)&nativeObject->DisplaySize;
    */
    public static native long internal_native_get_DisplaySize(long this_addr);

    public void set_DisplaySize(ImVec2 DisplaySize) {
        internal_native_set_DisplaySize(native_address, DisplaySize.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->DisplaySize = *((ImVec2*)DisplaySize_addr);
    */
    public static native void internal_native_set_DisplaySize(long this_addr, long DisplaySize_addr);

    public ImVec2 get_DisplayFramebufferScale() {
        long pointer = internal_native_get_DisplayFramebufferScale(native_address);
        if (pointer == 0)
            return null;
        if (ImVec2_TEMP_GEN_1 == null)
            ImVec2_TEMP_GEN_1 = ImVec2.createInstance();
        ImVec2_TEMP_GEN_1.internal_reset(pointer, false);
        return ImVec2_TEMP_GEN_1;
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return (jlong)&nativeObject->DisplayFramebufferScale;
    */
    public static native long internal_native_get_DisplayFramebufferScale(long this_addr);

    public void set_DisplayFramebufferScale(ImVec2 DisplayFramebufferScale) {
        internal_native_set_DisplayFramebufferScale(native_address, DisplayFramebufferScale.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->DisplayFramebufferScale = *((ImVec2*)DisplayFramebufferScale_addr);
    */
    public static native void internal_native_set_DisplayFramebufferScale(long this_addr, long DisplayFramebufferScale_addr);

    public float get_DeltaTime() {
        return internal_native_get_DeltaTime(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return nativeObject->DeltaTime;
    */
    public static native float internal_native_get_DeltaTime(long this_addr);

    public void set_DeltaTime(float DeltaTime) {
        internal_native_set_DeltaTime(native_address, DeltaTime);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->DeltaTime = DeltaTime;
    */
    public static native void internal_native_set_DeltaTime(long this_addr, float DeltaTime);

    public ImFontAtlas get_Fonts() {
        long pointer = internal_native_get_Fonts(native_address);
        if (pointer == 0)
            return null;
        if (ImFontAtlas_TEMP_GEN_0 == null)
            ImFontAtlas_TEMP_GEN_0 = ImFontAtlas.createInstance();
        ImFontAtlas_TEMP_GEN_0.internal_reset(pointer, false);
        return ImFontAtlas_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      ImFontAtlas* attr = nativeObject->Fonts;
      return (jlong)attr;
    */
    public static native long internal_native_get_Fonts(long this_addr);

    public void set_Fonts(ImFontAtlas Fonts) {
        internal_native_set_Fonts(native_address, Fonts.native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->Fonts = (ImFontAtlas*)Fonts_addr;
    */
    public static native void internal_native_set_Fonts(long this_addr, long Fonts_addr);

    public float get_FontGlobalScale() {
        return internal_native_get_FontGlobalScale(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return nativeObject->FontGlobalScale;
    */
    public static native float internal_native_get_FontGlobalScale(long this_addr);

    public void set_FontGlobalScale(float FontGlobalScale) {
        internal_native_set_FontGlobalScale(native_address, FontGlobalScale);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->FontGlobalScale = FontGlobalScale;
    */
    public static native void internal_native_set_FontGlobalScale(long this_addr, float FontGlobalScale);

    public boolean get_ConfigDockingNoSplit() {
        return internal_native_get_ConfigDockingNoSplit(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return nativeObject->ConfigDockingNoSplit;
    */
    public static native boolean internal_native_get_ConfigDockingNoSplit(long this_addr);

    public void set_ConfigDockingNoSplit(boolean ConfigDockingNoSplit) {
        internal_native_set_ConfigDockingNoSplit(native_address, ConfigDockingNoSplit);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->ConfigDockingNoSplit = ConfigDockingNoSplit;
    */
    public static native void internal_native_set_ConfigDockingNoSplit(long this_addr, boolean ConfigDockingNoSplit);

    public boolean get_ConfigDockingWithShift() {
        return internal_native_get_ConfigDockingWithShift(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return nativeObject->ConfigDockingWithShift;
    */
    public static native boolean internal_native_get_ConfigDockingWithShift(long this_addr);

    public void set_ConfigDockingWithShift(boolean ConfigDockingWithShift) {
        internal_native_set_ConfigDockingWithShift(native_address, ConfigDockingWithShift);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->ConfigDockingWithShift = ConfigDockingWithShift;
    */
    public static native void internal_native_set_ConfigDockingWithShift(long this_addr, boolean ConfigDockingWithShift);

    public boolean get_ConfigDockingAlwaysTabBar() {
        return internal_native_get_ConfigDockingAlwaysTabBar(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return nativeObject->ConfigDockingAlwaysTabBar;
    */
    public static native boolean internal_native_get_ConfigDockingAlwaysTabBar(long this_addr);

    public void set_ConfigDockingAlwaysTabBar(boolean ConfigDockingAlwaysTabBar) {
        internal_native_set_ConfigDockingAlwaysTabBar(native_address, ConfigDockingAlwaysTabBar);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->ConfigDockingAlwaysTabBar = ConfigDockingAlwaysTabBar;
    */
    public static native void internal_native_set_ConfigDockingAlwaysTabBar(long this_addr, boolean ConfigDockingAlwaysTabBar);

    public boolean get_ConfigDockingTransparentPayload() {
        return internal_native_get_ConfigDockingTransparentPayload(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return nativeObject->ConfigDockingTransparentPayload;
    */
    public static native boolean internal_native_get_ConfigDockingTransparentPayload(long this_addr);

    public void set_ConfigDockingTransparentPayload(boolean ConfigDockingTransparentPayload) {
        internal_native_set_ConfigDockingTransparentPayload(native_address, ConfigDockingTransparentPayload);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->ConfigDockingTransparentPayload = ConfigDockingTransparentPayload;
    */
    public static native void internal_native_set_ConfigDockingTransparentPayload(long this_addr, boolean ConfigDockingTransparentPayload);

    public ImGuiConfigFlags get_ConfigFlags() {
        int value = internal_native_get_ConfigFlags(native_address);
        return ImGuiConfigFlags.MAP.get(value);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return (jint)nativeObject->ConfigFlags;
    */
    public static native int internal_native_get_ConfigFlags(long this_addr);

    public void set_ConfigFlags(ImGuiConfigFlags ConfigFlags) {
        internal_native_set_ConfigFlags(native_address, ConfigFlags.getValue());
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->ConfigFlags = (::ImGuiConfigFlags)ConfigFlags;
    */
    public static native void internal_native_set_ConfigFlags(long this_addr, long ConfigFlags);

    public float get_IniSavingRate() {
        return internal_native_get_IniSavingRate(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return nativeObject->IniSavingRate;
    */
    public static native float internal_native_get_IniSavingRate(long this_addr);

    public void set_IniSavingRate(float IniSavingRate) {
        internal_native_set_IniSavingRate(native_address, IniSavingRate);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->IniSavingRate = IniSavingRate;
    */
    public static native void internal_native_set_IniSavingRate(long this_addr, float IniSavingRate);

    public boolean get_WantSaveIniSettings() {
        return internal_native_get_WantSaveIniSettings(native_address);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      return nativeObject->WantSaveIniSettings;
    */
    public static native boolean internal_native_get_WantSaveIniSettings(long this_addr);

    public void set_WantSaveIniSettings(boolean WantSaveIniSettings) {
        internal_native_set_WantSaveIniSettings(native_address, WantSaveIniSettings);
    }

    /*
      [-JNI;-NATIVE]
      ImGuiIO* nativeObject = (ImGuiIO*)this_addr;
      nativeObject->WantSaveIniSettings = WantSaveIniSettings;
    */
    public static native void internal_native_set_WantSaveIniSettings(long this_addr, boolean WantSaveIniSettings);
}
