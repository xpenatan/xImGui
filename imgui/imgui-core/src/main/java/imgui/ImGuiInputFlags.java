/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package imgui;

import java.util.Map;
import java.util.HashMap;
import com.github.xpenatan.jParser.idl.IDLEnum;

public enum ImGuiInputFlags implements IDLEnum<ImGuiInputFlags> {

    CUSTOM(0),
    None(ImGuiInputFlags_None_NATIVE()),
    Repeat(ImGuiInputFlags_Repeat_NATIVE()),
    RouteActive(ImGuiInputFlags_RouteActive_NATIVE()),
    RouteFocused(ImGuiInputFlags_RouteFocused_NATIVE()),
    RouteGlobal(ImGuiInputFlags_RouteGlobal_NATIVE()),
    RouteAlways(ImGuiInputFlags_RouteAlways_NATIVE()),
    RouteOverFocused(ImGuiInputFlags_RouteOverFocused_NATIVE()),
    RouteOverActive(ImGuiInputFlags_RouteOverActive_NATIVE()),
    RouteUnlessBgFocused(ImGuiInputFlags_RouteUnlessBgFocused_NATIVE()),
    RouteFromRootWindow(ImGuiInputFlags_RouteFromRootWindow_NATIVE()),
    Tooltip(ImGuiInputFlags_Tooltip_NATIVE());

    private int value;

    private ImGuiInputFlags(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public ImGuiInputFlags setValue(int value) {
        if (this != CUSTOM) {
            throw new RuntimeException("Cannot change none CUSTOM value");
        }
        this.value = value;
        return this;
    }

    public ImGuiInputFlags getCustom() {
        return CUSTOM;
    }

    public static final Map<Integer, ImGuiInputFlags> MAP = new HashMap<>();

    static {
        for (ImGuiInputFlags value : values()) {
            if (value != CUSTOM) {
                MAP.put(value.value, value);
            }
        }
    }

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_None;
*/
    private static native int ImGuiInputFlags_None_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_Repeat;
*/
    private static native int ImGuiInputFlags_Repeat_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_RouteActive;
*/
    private static native int ImGuiInputFlags_RouteActive_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_RouteFocused;
*/
    private static native int ImGuiInputFlags_RouteFocused_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_RouteGlobal;
*/
    private static native int ImGuiInputFlags_RouteGlobal_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_RouteAlways;
*/
    private static native int ImGuiInputFlags_RouteAlways_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_RouteOverFocused;
*/
    private static native int ImGuiInputFlags_RouteOverFocused_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_RouteOverActive;
*/
    private static native int ImGuiInputFlags_RouteOverActive_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_RouteUnlessBgFocused;
*/
    private static native int ImGuiInputFlags_RouteUnlessBgFocused_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_RouteFromRootWindow;
*/
    private static native int ImGuiInputFlags_RouteFromRootWindow_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)ImGuiInputFlags_Tooltip;
*/
    private static native int ImGuiInputFlags_Tooltip_NATIVE();
}
